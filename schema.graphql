# This file was generated. Do not edit manually.

schema {
  query: Query
}

"Define parent-child relations between types. This is used to add `child*` and `children*` convenience fields like `childImageSharp`."
directive @childOf(
  "A list of mime-types this type is a child of. Usually these are the mime-types handled by a transformer plugin."
  mimeTypes: [String!]! = [],
  "A list of types this type is a child of. Usually these are the types handled by a transformer plugin."
  types: [String!]! = []
) on OBJECT

"Add date formatting options."
directive @dateformat(difference: String, formatString: String, fromNow: Boolean, locale: String) on FIELD_DEFINITION

"Do not infer field types from field values."
directive @dontInfer on OBJECT

"Link to File node by relative path."
directive @fileByRelativePath(from: String) on FIELD_DEFINITION

"Infer field types from field values."
directive @infer on OBJECT

"Link to node by foreign-key relation."
directive @link(by: String! = "id", from: String, on: String) on FIELD_DEFINITION

"Define the mime-types handled by this type."
directive @mimeTypes(
  "The mime-types handled by this type."
  types: [String!]! = []
) on OBJECT

"""

DEPRECATED: Use interface inheritance instead, i.e. "interface Foo implements Node".

Adds root query fields for an interface. All implementing types must also implement the Node interface.
"""
directive @nodeInterface on INTERFACE

"Proxy resolver from another field."
directive @proxy(from: String!, fromNode: Boolean! = false) on FIELD_DEFINITION

interface ContentfulEntry {
  children: [Node!]!
  contentful_id: String!
  id: ID!
  internal: Internal!
  node_locale: String!
  parent: Node
}

interface ContentfulReference {
  contentful_id: String!
  id: ID!
}

"Node Interface"
interface Node {
  children: [Node!]!
  id: ID!
  internal: Internal!
  parent: Node
}

"Remote Interface"
interface RemoteFile {
  filename: String!
  filesize: Int
  "Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info."
  gatsbyImage(
    """

    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float,
    "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
    backgroundColor: String,
    """

    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int] = [750, 1080, 1366, 1920],
    cropFocus: [RemoteFileCropFocus],
    fit: RemoteFileFit = COVER,
    """

    The image formats to generate. Valid values are AUTO (meaning the same format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP, AVIF], and you should rarely need to change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    formats: [RemoteFileFormat!] = [AUTO, WEBP, AVIF],
    """

    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int,
    """

    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: RemoteFileLayout = CONSTRAINED,
    """

    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float] = [0.25, 0.5, 1.0, 2.0],
    """

    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).
    TRACED_SVG: deprecated. Will use DOMINANT_COLOR.
    NONE: no placeholder. Set the argument "backgroundColor" to use a fixed background color.
    """
    placeholder: RemoteFilePlaceholder = DOMINANT_COLOR,
    quality: Int = 75,
    """

    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String,
    """

    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int
  ): GatsbyImageData
  height: Int
  id: ID!
  mimeType: String!
  publicUrl: String!
  resize(
    aspectRatio: Float,
    cropFocus: [RemoteFileCropFocus],
    fit: RemoteFileFit = COVER,
    """

    The image formats to generate. Valid values are AUTO (meaning the same format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP, AVIF], and you should rarely need to change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    format: RemoteFileFormat = AUTO,
    height: Int,
    quality: Int = 75,
    width: Int
  ): RemoteFileResize
  width: Int
}

type ContentfulAddress implements ContentfulEntry & ContentfulReference & Node {
  children: [Node!]!
  city: String
  contentful_id: String!
  createdAt(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
  id: ID!
  internal: Internal!
  name: String
  node_locale: String!
  parent: Node
  phone: String
  position: ContentfulAddressPosition
  spaceId: String
  street: String
  sys: ContentfulAddressSys
  updatedAt(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
  zip: String
}

type ContentfulAddressConnection {
  distinct(field: ContentfulAddressFieldSelector!): [String!]!
  edges: [ContentfulAddressEdge!]!
  group(field: ContentfulAddressFieldSelector!, limit: Int, skip: Int): [ContentfulAddressGroupConnection!]!
  max(field: ContentfulAddressFieldSelector!): Float
  min(field: ContentfulAddressFieldSelector!): Float
  nodes: [ContentfulAddress!]!
  pageInfo: PageInfo!
  sum(field: ContentfulAddressFieldSelector!): Float
  totalCount: Int!
}

type ContentfulAddressEdge {
  next: ContentfulAddress
  node: ContentfulAddress!
  previous: ContentfulAddress
}

type ContentfulAddressGroupConnection {
  distinct(field: ContentfulAddressFieldSelector!): [String!]!
  edges: [ContentfulAddressEdge!]!
  field: String!
  fieldValue: String
  group(field: ContentfulAddressFieldSelector!, limit: Int, skip: Int): [ContentfulAddressGroupConnection!]!
  max(field: ContentfulAddressFieldSelector!): Float
  min(field: ContentfulAddressFieldSelector!): Float
  nodes: [ContentfulAddress!]!
  pageInfo: PageInfo!
  sum(field: ContentfulAddressFieldSelector!): Float
  totalCount: Int!
}

type ContentfulAddressPosition {
  lat: Float
  lon: Float
}

type ContentfulAddressSys {
  contentType: ContentfulAddressSysContentType
  revision: Int
  type: String
}

type ContentfulAddressSysContentType {
  sys: ContentfulAddressSysContentTypeSys
}

type ContentfulAddressSysContentTypeSys {
  id: String
  linkType: String
  type: String
}

type ContentfulArticles implements ContentfulEntry & ContentfulReference & Node {
  category: ContentfulCategories
  children: [Node!]!
  content: ContentfulArticlesContent
  contentful_id: String!
  cover: ContentfulAsset
  createdAt(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
  date(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
  description: String
  id: ID!
  internal: Internal!
  name: String
  node_locale: String!
  parent: Node
  slug: String
  spaceId: String
  sys: ContentfulArticlesSys
  updatedAt(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
}

type ContentfulArticlesConnection {
  distinct(field: ContentfulArticlesFieldSelector!): [String!]!
  edges: [ContentfulArticlesEdge!]!
  group(field: ContentfulArticlesFieldSelector!, limit: Int, skip: Int): [ContentfulArticlesGroupConnection!]!
  max(field: ContentfulArticlesFieldSelector!): Float
  min(field: ContentfulArticlesFieldSelector!): Float
  nodes: [ContentfulArticles!]!
  pageInfo: PageInfo!
  sum(field: ContentfulArticlesFieldSelector!): Float
  totalCount: Int!
}

type ContentfulArticlesContent {
  raw: String
}

type ContentfulArticlesEdge {
  next: ContentfulArticles
  node: ContentfulArticles!
  previous: ContentfulArticles
}

type ContentfulArticlesGroupConnection {
  distinct(field: ContentfulArticlesFieldSelector!): [String!]!
  edges: [ContentfulArticlesEdge!]!
  field: String!
  fieldValue: String
  group(field: ContentfulArticlesFieldSelector!, limit: Int, skip: Int): [ContentfulArticlesGroupConnection!]!
  max(field: ContentfulArticlesFieldSelector!): Float
  min(field: ContentfulArticlesFieldSelector!): Float
  nodes: [ContentfulArticles!]!
  pageInfo: PageInfo!
  sum(field: ContentfulArticlesFieldSelector!): Float
  totalCount: Int!
}

type ContentfulArticlesSys {
  contentType: ContentfulArticlesSysContentType
  revision: Int
  type: String
}

type ContentfulArticlesSysContentType {
  sys: ContentfulArticlesSysContentTypeSys
}

type ContentfulArticlesSysContentTypeSys {
  id: String
  linkType: String
  type: String
}

type ContentfulAsset implements ContentfulReference & Node & RemoteFile {
  children: [Node!]!
  contentful_id: String!
  createdAt(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
  description: String
  file: ContentfulAssetFile
  filename: String!
  filesize: Int
  "Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info."
  gatsbyImage(
    """

    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float,
    "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
    backgroundColor: String,
    """

    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int] = [750, 1080, 1366, 1920],
    cropFocus: [RemoteFileCropFocus],
    fit: RemoteFileFit = COVER,
    """

    The image formats to generate. Valid values are AUTO (meaning the same format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP, AVIF], and you should rarely need to change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    formats: [RemoteFileFormat!] = [AUTO, WEBP, AVIF],
    """

    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int,
    """

    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: RemoteFileLayout = CONSTRAINED,
    """

    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float] = [0.25, 0.5, 1.0, 2.0],
    """

    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).
    TRACED_SVG: deprecated. Will use DOMINANT_COLOR.
    NONE: no placeholder. Set the argument "backgroundColor" to use a fixed background color.
    """
    placeholder: RemoteFilePlaceholder = DOMINANT_COLOR,
    quality: Int = 75,
    """

    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String,
    """

    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int
  ): GatsbyImageData
  gatsbyImageData(
    """

    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float,
    "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
    backgroundColor: String,
    """

    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int],
    """

    Desired corner radius in pixels. Results in an image with rounded corners.
    Pass `-1` for a full circle/ellipse.
    """
    cornerRadius: Int = 0,
    cropFocus: ContentfulImageCropFocus,
    """

    The image formats to generate. Valid values are AUTO (meaning the same format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP], and you should rarely need to change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    formats: [GatsbyImageFormat] = [NO_CHANGE, WEBP],
    "If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
    height: Int,
    jpegProgressive: Boolean = true,
    """

    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout,
    """

    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float],
    """

    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI.
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).
    TRACED_SVG: deprecated. Will use DOMINANT_COLOR.
    NONE: no placeholder. Set the argument "backgroundColor" to use a fixed background color.
    """
    placeholder: GatsbyImagePlaceholder,
    quality: Int,
    resizingBehavior: ImageResizingBehavior,
    """

    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String,
    """

    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int
  ): GatsbyImageData
  height: Int
  id: ID!
  internal: Internal!
  mimeType: String!
  node_locale: String
  parent: Node
  placeholderUrl: String
  publicUrl: String!
  resize(
    aspectRatio: Float,
    cropFocus: [RemoteFileCropFocus],
    fit: RemoteFileFit = COVER,
    """

    The image formats to generate. Valid values are AUTO (meaning the same format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP, AVIF], and you should rarely need to change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    format: RemoteFileFormat = AUTO,
    height: Int,
    quality: Int = 75,
    width: Int
  ): RemoteFileResize
  size: Int
  spaceId: String
  sys: ContentfulAssetSys
  title: String
  updatedAt(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
  url: String
  width: Int
}

type ContentfulAssetConnection {
  distinct(field: ContentfulAssetFieldSelector!): [String!]!
  edges: [ContentfulAssetEdge!]!
  group(field: ContentfulAssetFieldSelector!, limit: Int, skip: Int): [ContentfulAssetGroupConnection!]!
  max(field: ContentfulAssetFieldSelector!): Float
  min(field: ContentfulAssetFieldSelector!): Float
  nodes: [ContentfulAsset!]!
  pageInfo: PageInfo!
  sum(field: ContentfulAssetFieldSelector!): Float
  totalCount: Int!
}

type ContentfulAssetEdge {
  next: ContentfulAsset
  node: ContentfulAsset!
  previous: ContentfulAsset
}

type ContentfulAssetFile {
  contentType: String
  details: ContentfulAssetFileDetails
  fileName: String
  url: String
}

type ContentfulAssetFileDetails {
  image: ContentfulAssetFileDetailsImage
  size: Int
}

type ContentfulAssetFileDetailsImage {
  height: Int
  width: Int
}

type ContentfulAssetGroupConnection {
  distinct(field: ContentfulAssetFieldSelector!): [String!]!
  edges: [ContentfulAssetEdge!]!
  field: String!
  fieldValue: String
  group(field: ContentfulAssetFieldSelector!, limit: Int, skip: Int): [ContentfulAssetGroupConnection!]!
  max(field: ContentfulAssetFieldSelector!): Float
  min(field: ContentfulAssetFieldSelector!): Float
  nodes: [ContentfulAsset!]!
  pageInfo: PageInfo!
  sum(field: ContentfulAssetFieldSelector!): Float
  totalCount: Int!
}

type ContentfulAssetSys {
  revision: Int
  type: String
}

type ContentfulCategories implements ContentfulEntry & ContentfulReference & Node {
  articles: [ContentfulArticles]
  children: [Node!]!
  contentful_id: String!
  createdAt(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
  id: ID!
  internal: Internal!
  name: String
  node_locale: String!
  parent: Node
  spaceId: String
  sys: ContentfulCategoriesSys
  updatedAt(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
}

type ContentfulCategoriesConnection {
  distinct(field: ContentfulCategoriesFieldSelector!): [String!]!
  edges: [ContentfulCategoriesEdge!]!
  group(field: ContentfulCategoriesFieldSelector!, limit: Int, skip: Int): [ContentfulCategoriesGroupConnection!]!
  max(field: ContentfulCategoriesFieldSelector!): Float
  min(field: ContentfulCategoriesFieldSelector!): Float
  nodes: [ContentfulCategories!]!
  pageInfo: PageInfo!
  sum(field: ContentfulCategoriesFieldSelector!): Float
  totalCount: Int!
}

type ContentfulCategoriesEdge {
  next: ContentfulCategories
  node: ContentfulCategories!
  previous: ContentfulCategories
}

type ContentfulCategoriesGroupConnection {
  distinct(field: ContentfulCategoriesFieldSelector!): [String!]!
  edges: [ContentfulCategoriesEdge!]!
  field: String!
  fieldValue: String
  group(field: ContentfulCategoriesFieldSelector!, limit: Int, skip: Int): [ContentfulCategoriesGroupConnection!]!
  max(field: ContentfulCategoriesFieldSelector!): Float
  min(field: ContentfulCategoriesFieldSelector!): Float
  nodes: [ContentfulCategories!]!
  pageInfo: PageInfo!
  sum(field: ContentfulCategoriesFieldSelector!): Float
  totalCount: Int!
}

type ContentfulCategoriesSys {
  contentType: ContentfulCategoriesSysContentType
  revision: Int
  type: String
}

type ContentfulCategoriesSysContentType {
  sys: ContentfulCategoriesSysContentTypeSys
}

type ContentfulCategoriesSysContentTypeSys {
  id: String
  linkType: String
  type: String
}

type ContentfulContentType implements Node {
  children: [Node!]!
  description: String
  displayField: String
  id: ID!
  internal: Internal!
  name: String
  parent: Node
  sys: ContentfulContentTypeSys
}

type ContentfulContentTypeConnection {
  distinct(field: ContentfulContentTypeFieldSelector!): [String!]!
  edges: [ContentfulContentTypeEdge!]!
  group(field: ContentfulContentTypeFieldSelector!, limit: Int, skip: Int): [ContentfulContentTypeGroupConnection!]!
  max(field: ContentfulContentTypeFieldSelector!): Float
  min(field: ContentfulContentTypeFieldSelector!): Float
  nodes: [ContentfulContentType!]!
  pageInfo: PageInfo!
  sum(field: ContentfulContentTypeFieldSelector!): Float
  totalCount: Int!
}

type ContentfulContentTypeEdge {
  next: ContentfulContentType
  node: ContentfulContentType!
  previous: ContentfulContentType
}

type ContentfulContentTypeGroupConnection {
  distinct(field: ContentfulContentTypeFieldSelector!): [String!]!
  edges: [ContentfulContentTypeEdge!]!
  field: String!
  fieldValue: String
  group(field: ContentfulContentTypeFieldSelector!, limit: Int, skip: Int): [ContentfulContentTypeGroupConnection!]!
  max(field: ContentfulContentTypeFieldSelector!): Float
  min(field: ContentfulContentTypeFieldSelector!): Float
  nodes: [ContentfulContentType!]!
  pageInfo: PageInfo!
  sum(field: ContentfulContentTypeFieldSelector!): Float
  totalCount: Int!
}

type ContentfulContentTypeSys {
  type: String
}

type ContentfulEntryConnection {
  distinct(field: ContentfulEntryFieldSelector!): [String!]!
  edges: [ContentfulEntryEdge!]!
  group(field: ContentfulEntryFieldSelector!, limit: Int, skip: Int): [ContentfulEntryGroupConnection!]!
  max(field: ContentfulEntryFieldSelector!): Float
  min(field: ContentfulEntryFieldSelector!): Float
  nodes: [ContentfulEntry!]!
  pageInfo: PageInfo!
  sum(field: ContentfulEntryFieldSelector!): Float
  totalCount: Int!
}

type ContentfulEntryEdge {
  next: ContentfulEntry
  node: ContentfulEntry!
  previous: ContentfulEntry
}

type ContentfulEntryGroupConnection {
  distinct(field: ContentfulEntryFieldSelector!): [String!]!
  edges: [ContentfulEntryEdge!]!
  field: String!
  fieldValue: String
  group(field: ContentfulEntryFieldSelector!, limit: Int, skip: Int): [ContentfulEntryGroupConnection!]!
  max(field: ContentfulEntryFieldSelector!): Float
  min(field: ContentfulEntryFieldSelector!): Float
  nodes: [ContentfulEntry!]!
  pageInfo: PageInfo!
  sum(field: ContentfulEntryFieldSelector!): Float
  totalCount: Int!
}

type ContentfulJobs implements ContentfulEntry & ContentfulReference & Node {
  "Returns the first child node of type contentfulJobsDescriptionTextNode or null if there are no children of given type on this node"
  childContentfulJobsDescriptionTextNode: contentfulJobsDescriptionTextNode
  children: [Node!]!
  "Returns all children nodes filtered by type contentfulJobsDescriptionTextNode"
  childrenContentfulJobsDescriptionTextNode: [contentfulJobsDescriptionTextNode]
  content: ContentfulJobsContent
  contentful_id: String!
  createdAt(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
  date(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
  description: contentfulJobsDescriptionTextNode
  file: ContentfulAsset
  id: ID!
  internal: Internal!
  node_locale: String!
  parent: Node
  slug: String
  spaceId: String
  sys: ContentfulJobsSys
  title: String
  updatedAt(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
}

type ContentfulJobsConnection {
  distinct(field: ContentfulJobsFieldSelector!): [String!]!
  edges: [ContentfulJobsEdge!]!
  group(field: ContentfulJobsFieldSelector!, limit: Int, skip: Int): [ContentfulJobsGroupConnection!]!
  max(field: ContentfulJobsFieldSelector!): Float
  min(field: ContentfulJobsFieldSelector!): Float
  nodes: [ContentfulJobs!]!
  pageInfo: PageInfo!
  sum(field: ContentfulJobsFieldSelector!): Float
  totalCount: Int!
}

type ContentfulJobsContent {
  raw: String
}

type ContentfulJobsEdge {
  next: ContentfulJobs
  node: ContentfulJobs!
  previous: ContentfulJobs
}

type ContentfulJobsGroupConnection {
  distinct(field: ContentfulJobsFieldSelector!): [String!]!
  edges: [ContentfulJobsEdge!]!
  field: String!
  fieldValue: String
  group(field: ContentfulJobsFieldSelector!, limit: Int, skip: Int): [ContentfulJobsGroupConnection!]!
  max(field: ContentfulJobsFieldSelector!): Float
  min(field: ContentfulJobsFieldSelector!): Float
  nodes: [ContentfulJobs!]!
  pageInfo: PageInfo!
  sum(field: ContentfulJobsFieldSelector!): Float
  totalCount: Int!
}

type ContentfulJobsSys {
  contentType: ContentfulJobsSysContentType
  revision: Int
  type: String
}

type ContentfulJobsSysContentType {
  sys: ContentfulJobsSysContentTypeSys
}

type ContentfulJobsSysContentTypeSys {
  id: String
  linkType: String
  type: String
}

type ContentfulOffer implements ContentfulEntry & ContentfulReference & Node {
  children: [Node!]!
  content: ContentfulOfferContent
  contentful_id: String!
  cover: ContentfulAsset
  createdAt(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
  description: String
  id: ID!
  internal: Internal!
  name: String
  node_locale: String!
  parent: Node
  services: [String]
  slug: String
  spaceId: String
  sys: ContentfulOfferSys
  updatedAt(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
}

type ContentfulOfferConnection {
  distinct(field: ContentfulOfferFieldSelector!): [String!]!
  edges: [ContentfulOfferEdge!]!
  group(field: ContentfulOfferFieldSelector!, limit: Int, skip: Int): [ContentfulOfferGroupConnection!]!
  max(field: ContentfulOfferFieldSelector!): Float
  min(field: ContentfulOfferFieldSelector!): Float
  nodes: [ContentfulOffer!]!
  pageInfo: PageInfo!
  sum(field: ContentfulOfferFieldSelector!): Float
  totalCount: Int!
}

type ContentfulOfferContent {
  raw: String
}

type ContentfulOfferEdge {
  next: ContentfulOffer
  node: ContentfulOffer!
  previous: ContentfulOffer
}

type ContentfulOfferGroupConnection {
  distinct(field: ContentfulOfferFieldSelector!): [String!]!
  edges: [ContentfulOfferEdge!]!
  field: String!
  fieldValue: String
  group(field: ContentfulOfferFieldSelector!, limit: Int, skip: Int): [ContentfulOfferGroupConnection!]!
  max(field: ContentfulOfferFieldSelector!): Float
  min(field: ContentfulOfferFieldSelector!): Float
  nodes: [ContentfulOffer!]!
  pageInfo: PageInfo!
  sum(field: ContentfulOfferFieldSelector!): Float
  totalCount: Int!
}

type ContentfulOfferSys {
  contentType: ContentfulOfferSysContentType
  revision: Int
  type: String
}

type ContentfulOfferSysContentType {
  sys: ContentfulOfferSysContentTypeSys
}

type ContentfulOfferSysContentTypeSys {
  id: String
  linkType: String
  type: String
}

type ContentfulPage implements ContentfulEntry & ContentfulReference & Node {
  children: [Node!]!
  contentful_id: String!
  createdAt(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
  id: ID!
  internal: Internal!
  node_locale: String!
  parent: Node
  seo_description: String
  seo_title: String
  slug: String
  spaceId: String
  sys: ContentfulPageSys
  updatedAt(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
}

type ContentfulPageConnection {
  distinct(field: ContentfulPageFieldSelector!): [String!]!
  edges: [ContentfulPageEdge!]!
  group(field: ContentfulPageFieldSelector!, limit: Int, skip: Int): [ContentfulPageGroupConnection!]!
  max(field: ContentfulPageFieldSelector!): Float
  min(field: ContentfulPageFieldSelector!): Float
  nodes: [ContentfulPage!]!
  pageInfo: PageInfo!
  sum(field: ContentfulPageFieldSelector!): Float
  totalCount: Int!
}

type ContentfulPageEdge {
  next: ContentfulPage
  node: ContentfulPage!
  previous: ContentfulPage
}

type ContentfulPageGroupConnection {
  distinct(field: ContentfulPageFieldSelector!): [String!]!
  edges: [ContentfulPageEdge!]!
  field: String!
  fieldValue: String
  group(field: ContentfulPageFieldSelector!, limit: Int, skip: Int): [ContentfulPageGroupConnection!]!
  max(field: ContentfulPageFieldSelector!): Float
  min(field: ContentfulPageFieldSelector!): Float
  nodes: [ContentfulPage!]!
  pageInfo: PageInfo!
  sum(field: ContentfulPageFieldSelector!): Float
  totalCount: Int!
}

type ContentfulPageSys {
  contentType: ContentfulPageSysContentType
  revision: Int
  type: String
}

type ContentfulPageSysContentType {
  sys: ContentfulPageSysContentTypeSys
}

type ContentfulPageSysContentTypeSys {
  id: String
  linkType: String
  type: String
}

type ContentfulRedirect implements ContentfulEntry & ContentfulReference & Node {
  children: [Node!]!
  contentful_id: String!
  createdAt(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
  from: String
  id: ID!
  internal: Internal!
  node_locale: String!
  parent: Node
  spaceId: String
  sys: ContentfulRedirectSys
  to: String
  updatedAt(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
}

type ContentfulRedirectConnection {
  distinct(field: ContentfulRedirectFieldSelector!): [String!]!
  edges: [ContentfulRedirectEdge!]!
  group(field: ContentfulRedirectFieldSelector!, limit: Int, skip: Int): [ContentfulRedirectGroupConnection!]!
  max(field: ContentfulRedirectFieldSelector!): Float
  min(field: ContentfulRedirectFieldSelector!): Float
  nodes: [ContentfulRedirect!]!
  pageInfo: PageInfo!
  sum(field: ContentfulRedirectFieldSelector!): Float
  totalCount: Int!
}

type ContentfulRedirectEdge {
  next: ContentfulRedirect
  node: ContentfulRedirect!
  previous: ContentfulRedirect
}

type ContentfulRedirectGroupConnection {
  distinct(field: ContentfulRedirectFieldSelector!): [String!]!
  edges: [ContentfulRedirectEdge!]!
  field: String!
  fieldValue: String
  group(field: ContentfulRedirectFieldSelector!, limit: Int, skip: Int): [ContentfulRedirectGroupConnection!]!
  max(field: ContentfulRedirectFieldSelector!): Float
  min(field: ContentfulRedirectFieldSelector!): Float
  nodes: [ContentfulRedirect!]!
  pageInfo: PageInfo!
  sum(field: ContentfulRedirectFieldSelector!): Float
  totalCount: Int!
}

type ContentfulRedirectSys {
  contentType: ContentfulRedirectSysContentType
  revision: Int
  type: String
}

type ContentfulRedirectSysContentType {
  sys: ContentfulRedirectSysContentTypeSys
}

type ContentfulRedirectSysContentTypeSys {
  id: String
  linkType: String
  type: String
}

type ContentfulService implements ContentfulEntry & ContentfulReference & Node {
  children: [Node!]!
  content: ContentfulServiceContent
  contentful_id: String!
  cover: ContentfulAsset
  createdAt(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
  description: String
  id: ID!
  internal: Internal!
  name: String
  node_locale: String!
  parent: Node
  services: [String]
  slug: String
  spaceId: String
  sys: ContentfulServiceSys
  updatedAt(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
}

type ContentfulServiceConnection {
  distinct(field: ContentfulServiceFieldSelector!): [String!]!
  edges: [ContentfulServiceEdge!]!
  group(field: ContentfulServiceFieldSelector!, limit: Int, skip: Int): [ContentfulServiceGroupConnection!]!
  max(field: ContentfulServiceFieldSelector!): Float
  min(field: ContentfulServiceFieldSelector!): Float
  nodes: [ContentfulService!]!
  pageInfo: PageInfo!
  sum(field: ContentfulServiceFieldSelector!): Float
  totalCount: Int!
}

type ContentfulServiceContent {
  raw: String
}

type ContentfulServiceEdge {
  next: ContentfulService
  node: ContentfulService!
  previous: ContentfulService
}

type ContentfulServiceGroupConnection {
  distinct(field: ContentfulServiceFieldSelector!): [String!]!
  edges: [ContentfulServiceEdge!]!
  field: String!
  fieldValue: String
  group(field: ContentfulServiceFieldSelector!, limit: Int, skip: Int): [ContentfulServiceGroupConnection!]!
  max(field: ContentfulServiceFieldSelector!): Float
  min(field: ContentfulServiceFieldSelector!): Float
  nodes: [ContentfulService!]!
  pageInfo: PageInfo!
  sum(field: ContentfulServiceFieldSelector!): Float
  totalCount: Int!
}

type ContentfulServiceSys {
  contentType: ContentfulServiceSysContentType
  revision: Int
  type: String
}

type ContentfulServiceSysContentType {
  sys: ContentfulServiceSysContentTypeSys
}

type ContentfulServiceSysContentTypeSys {
  id: String
  linkType: String
  type: String
}

type ContentfulServices implements ContentfulEntry & ContentfulReference & Node {
  children: [Node!]!
  contentful_id: String!
  createdAt(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
  id: ID!
  internal: Internal!
  name: String
  node_locale: String!
  order: Int
  parent: Node
  slug: String
  spaceId: String
  sys: ContentfulServicesSys
  text: ContentfulServicesText
  title: String
  updatedAt(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
}

type ContentfulServicesConnection {
  distinct(field: ContentfulServicesFieldSelector!): [String!]!
  edges: [ContentfulServicesEdge!]!
  group(field: ContentfulServicesFieldSelector!, limit: Int, skip: Int): [ContentfulServicesGroupConnection!]!
  max(field: ContentfulServicesFieldSelector!): Float
  min(field: ContentfulServicesFieldSelector!): Float
  nodes: [ContentfulServices!]!
  pageInfo: PageInfo!
  sum(field: ContentfulServicesFieldSelector!): Float
  totalCount: Int!
}

type ContentfulServicesCp implements ContentfulEntry & ContentfulReference & Node {
  "Returns the first child node of type contentfulServicesCpContentJsonNode or null if there are no children of given type on this node"
  childContentfulServicesCpContentJsonNode: contentfulServicesCpContentJsonNode
  children: [Node!]!
  "Returns all children nodes filtered by type contentfulServicesCpContentJsonNode"
  childrenContentfulServicesCpContentJsonNode: [contentfulServicesCpContentJsonNode]
  content: [contentfulServicesCpContentJsonNode]
  contentful_id: String!
  createdAt(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
  id: ID!
  image: ContentfulAsset
  internal: Internal!
  name: String
  node_locale: String!
  order: Int
  parent: Node
  slug: String
  spaceId: String
  sys: ContentfulServicesCpSys
  updatedAt(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
}

type ContentfulServicesCpConnection {
  distinct(field: ContentfulServicesCpFieldSelector!): [String!]!
  edges: [ContentfulServicesCpEdge!]!
  group(field: ContentfulServicesCpFieldSelector!, limit: Int, skip: Int): [ContentfulServicesCpGroupConnection!]!
  max(field: ContentfulServicesCpFieldSelector!): Float
  min(field: ContentfulServicesCpFieldSelector!): Float
  nodes: [ContentfulServicesCp!]!
  pageInfo: PageInfo!
  sum(field: ContentfulServicesCpFieldSelector!): Float
  totalCount: Int!
}

type ContentfulServicesCpEdge {
  next: ContentfulServicesCp
  node: ContentfulServicesCp!
  previous: ContentfulServicesCp
}

type ContentfulServicesCpGroupConnection {
  distinct(field: ContentfulServicesCpFieldSelector!): [String!]!
  edges: [ContentfulServicesCpEdge!]!
  field: String!
  fieldValue: String
  group(field: ContentfulServicesCpFieldSelector!, limit: Int, skip: Int): [ContentfulServicesCpGroupConnection!]!
  max(field: ContentfulServicesCpFieldSelector!): Float
  min(field: ContentfulServicesCpFieldSelector!): Float
  nodes: [ContentfulServicesCp!]!
  pageInfo: PageInfo!
  sum(field: ContentfulServicesCpFieldSelector!): Float
  totalCount: Int!
}

type ContentfulServicesCpSys {
  contentType: ContentfulServicesCpSysContentType
  revision: Int
  type: String
}

type ContentfulServicesCpSysContentType {
  sys: ContentfulServicesCpSysContentTypeSys
}

type ContentfulServicesCpSysContentTypeSys {
  id: String
  linkType: String
  type: String
}

type ContentfulServicesEdge {
  next: ContentfulServices
  node: ContentfulServices!
  previous: ContentfulServices
}

type ContentfulServicesGroupConnection {
  distinct(field: ContentfulServicesFieldSelector!): [String!]!
  edges: [ContentfulServicesEdge!]!
  field: String!
  fieldValue: String
  group(field: ContentfulServicesFieldSelector!, limit: Int, skip: Int): [ContentfulServicesGroupConnection!]!
  max(field: ContentfulServicesFieldSelector!): Float
  min(field: ContentfulServicesFieldSelector!): Float
  nodes: [ContentfulServices!]!
  pageInfo: PageInfo!
  sum(field: ContentfulServicesFieldSelector!): Float
  totalCount: Int!
}

type ContentfulServicesSys {
  contentType: ContentfulServicesSysContentType
  revision: Int
  type: String
}

type ContentfulServicesSysContentType {
  sys: ContentfulServicesSysContentTypeSys
}

type ContentfulServicesSysContentTypeSys {
  id: String
  linkType: String
  type: String
}

type ContentfulServicesText {
  raw: String
}

type ContentfulSignature implements ContentfulEntry & ContentfulReference & Node {
  children: [Node!]!
  contentful_id: String!
  createdAt(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
  firstName: String
  id: ID!
  internal: Internal!
  lastName: String
  legal: Boolean
  node_locale: String!
  parent: Node
  spaceId: String
  sys: ContentfulSignatureSys
  title: [String]
  updatedAt(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
}

type ContentfulSignatureConnection {
  distinct(field: ContentfulSignatureFieldSelector!): [String!]!
  edges: [ContentfulSignatureEdge!]!
  group(field: ContentfulSignatureFieldSelector!, limit: Int, skip: Int): [ContentfulSignatureGroupConnection!]!
  max(field: ContentfulSignatureFieldSelector!): Float
  min(field: ContentfulSignatureFieldSelector!): Float
  nodes: [ContentfulSignature!]!
  pageInfo: PageInfo!
  sum(field: ContentfulSignatureFieldSelector!): Float
  totalCount: Int!
}

type ContentfulSignatureEdge {
  next: ContentfulSignature
  node: ContentfulSignature!
  previous: ContentfulSignature
}

type ContentfulSignatureGroupConnection {
  distinct(field: ContentfulSignatureFieldSelector!): [String!]!
  edges: [ContentfulSignatureEdge!]!
  field: String!
  fieldValue: String
  group(field: ContentfulSignatureFieldSelector!, limit: Int, skip: Int): [ContentfulSignatureGroupConnection!]!
  max(field: ContentfulSignatureFieldSelector!): Float
  min(field: ContentfulSignatureFieldSelector!): Float
  nodes: [ContentfulSignature!]!
  pageInfo: PageInfo!
  sum(field: ContentfulSignatureFieldSelector!): Float
  totalCount: Int!
}

type ContentfulSignatureLogo implements ContentfulEntry & ContentfulReference & Node {
  children: [Node!]!
  contentful_id: String!
  createdAt(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
  id: ID!
  internal: Internal!
  logo: ContentfulAsset
  name: String
  node_locale: String!
  parent: Node
  spaceId: String
  sys: ContentfulSignatureLogoSys
  updatedAt(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
}

type ContentfulSignatureLogoConnection {
  distinct(field: ContentfulSignatureLogoFieldSelector!): [String!]!
  edges: [ContentfulSignatureLogoEdge!]!
  group(field: ContentfulSignatureLogoFieldSelector!, limit: Int, skip: Int): [ContentfulSignatureLogoGroupConnection!]!
  max(field: ContentfulSignatureLogoFieldSelector!): Float
  min(field: ContentfulSignatureLogoFieldSelector!): Float
  nodes: [ContentfulSignatureLogo!]!
  pageInfo: PageInfo!
  sum(field: ContentfulSignatureLogoFieldSelector!): Float
  totalCount: Int!
}

type ContentfulSignatureLogoEdge {
  next: ContentfulSignatureLogo
  node: ContentfulSignatureLogo!
  previous: ContentfulSignatureLogo
}

type ContentfulSignatureLogoGroupConnection {
  distinct(field: ContentfulSignatureLogoFieldSelector!): [String!]!
  edges: [ContentfulSignatureLogoEdge!]!
  field: String!
  fieldValue: String
  group(field: ContentfulSignatureLogoFieldSelector!, limit: Int, skip: Int): [ContentfulSignatureLogoGroupConnection!]!
  max(field: ContentfulSignatureLogoFieldSelector!): Float
  min(field: ContentfulSignatureLogoFieldSelector!): Float
  nodes: [ContentfulSignatureLogo!]!
  pageInfo: PageInfo!
  sum(field: ContentfulSignatureLogoFieldSelector!): Float
  totalCount: Int!
}

type ContentfulSignatureLogoSys {
  contentType: ContentfulSignatureLogoSysContentType
  revision: Int
  type: String
}

type ContentfulSignatureLogoSysContentType {
  sys: ContentfulSignatureLogoSysContentTypeSys
}

type ContentfulSignatureLogoSysContentTypeSys {
  id: String
  linkType: String
  type: String
}

type ContentfulSignatureSys {
  contentType: ContentfulSignatureSysContentType
  revision: Int
  type: String
}

type ContentfulSignatureSysContentType {
  sys: ContentfulSignatureSysContentTypeSys
}

type ContentfulSignatureSysContentTypeSys {
  id: String
  linkType: String
  type: String
}

type Directory implements Node {
  absolutePath: String!
  accessTime(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date!
  atime(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date!
  atimeMs: Float!
  base: String!
  birthTime(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  changeTime(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date!
  children: [Node!]!
  ctime(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date!
  ctimeMs: Float!
  dev: Int!
  dir: String!
  ext: String!
  extension: String!
  gid: Int!
  id: ID!
  ino: Float!
  internal: Internal!
  mode: Int!
  modifiedTime(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date!
  mtime(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date!
  mtimeMs: Float!
  name: String!
  nlink: Int!
  parent: Node
  prettySize: String!
  rdev: Int!
  relativeDirectory: String!
  relativePath: String!
  root: String!
  size: Int!
  sourceInstanceName: String!
  uid: Int!
}

type DirectoryConnection {
  distinct(field: DirectoryFieldSelector!): [String!]!
  edges: [DirectoryEdge!]!
  group(field: DirectoryFieldSelector!, limit: Int, skip: Int): [DirectoryGroupConnection!]!
  max(field: DirectoryFieldSelector!): Float
  min(field: DirectoryFieldSelector!): Float
  nodes: [Directory!]!
  pageInfo: PageInfo!
  sum(field: DirectoryFieldSelector!): Float
  totalCount: Int!
}

type DirectoryEdge {
  next: Directory
  node: Directory!
  previous: Directory
}

type DirectoryGroupConnection {
  distinct(field: DirectoryFieldSelector!): [String!]!
  edges: [DirectoryEdge!]!
  field: String!
  fieldValue: String
  group(field: DirectoryFieldSelector!, limit: Int, skip: Int): [DirectoryGroupConnection!]!
  max(field: DirectoryFieldSelector!): Float
  min(field: DirectoryFieldSelector!): Float
  nodes: [Directory!]!
  pageInfo: PageInfo!
  sum(field: DirectoryFieldSelector!): Float
  totalCount: Int!
}

type File implements Node {
  absolutePath: String!
  accessTime(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date!
  atime(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date!
  atimeMs: Float!
  base: String!
  birthTime(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int
  changeTime(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date!
  "Returns the first child node of type ImageSharp or null if there are no children of given type on this node"
  childImageSharp: ImageSharp
  children: [Node!]!
  "Returns all children nodes filtered by type ImageSharp"
  childrenImageSharp: [ImageSharp]
  ctime(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date!
  ctimeMs: Float!
  dev: Int!
  dir: String!
  ext: String!
  extension: String!
  gid: Int!
  id: ID!
  ino: Float!
  internal: Internal!
  mode: Int!
  modifiedTime(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date!
  mtime(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date!
  mtimeMs: Float!
  name: String!
  nlink: Int!
  parent: Node
  prettySize: String!
  "Copy file to static directory and return public url to it"
  publicURL: String
  rdev: Int!
  relativeDirectory: String!
  relativePath: String!
  root: String!
  size: Int!
  sourceInstanceName: String!
  uid: Int!
}

type FileConnection {
  distinct(field: FileFieldSelector!): [String!]!
  edges: [FileEdge!]!
  group(field: FileFieldSelector!, limit: Int, skip: Int): [FileGroupConnection!]!
  max(field: FileFieldSelector!): Float
  min(field: FileFieldSelector!): Float
  nodes: [File!]!
  pageInfo: PageInfo!
  sum(field: FileFieldSelector!): Float
  totalCount: Int!
}

type FileEdge {
  next: File
  node: File!
  previous: File
}

type FileGroupConnection {
  distinct(field: FileFieldSelector!): [String!]!
  edges: [FileEdge!]!
  field: String!
  fieldValue: String
  group(field: FileFieldSelector!, limit: Int, skip: Int): [FileGroupConnection!]!
  max(field: FileFieldSelector!): Float
  min(field: FileFieldSelector!): Float
  nodes: [File!]!
  pageInfo: PageInfo!
  sum(field: FileFieldSelector!): Float
  totalCount: Int!
}

type ImageSharp implements Node {
  children: [Node!]!
  fixed(background: String = "rgba(0,0,0,1)", base64Width: Int, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient, fit: ImageFit = COVER, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, jpegQuality: Int, pngCompressionSpeed: Int = 4, pngQuality: Int, quality: Int, rotate: Int = 0, toFormat: ImageFormat = AUTO, toFormatBase64: ImageFormat = AUTO, traceSVG: Potrace, trim: Float = 0.0, webpQuality: Int, width: Int): ImageSharpFixed
  fluid(
    background: String = "rgba(0,0,0,1)",
    base64Width: Int,
    cropFocus: ImageCropFocus = ATTENTION,
    duotone: DuotoneGradient,
    fit: ImageFit = COVER,
    grayscale: Boolean = false,
    jpegProgressive: Boolean = true,
    jpegQuality: Int,
    maxHeight: Int,
    maxWidth: Int,
    pngCompressionSpeed: Int = 4,
    pngQuality: Int,
    quality: Int,
    rotate: Int = 0,
    sizes: String = "",
    "A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]"
    srcSetBreakpoints: [Int] = [],
    toFormat: ImageFormat = AUTO,
    toFormatBase64: ImageFormat = AUTO,
    traceSVG: Potrace,
    trim: Float = 0.0,
    webpQuality: Int
  ): ImageSharpFluid
  gatsbyImageData(
    """

    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float,
    "Options to pass to sharp when generating AVIF images."
    avifOptions: AVIFOptions,
    "Background color applied to the wrapper. Also passed to sharp to use as a background when \"letterboxing\" an image to another aspect ratio."
    backgroundColor: String,
    "Options for the low-resolution placeholder image. Set placeholder to \"BLURRED\" to use this"
    blurredOptions: BlurredOptions,
    """

    Specifies the image widths to generate. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int],
    """

    The image formats to generate. Valid values are "AUTO" (meaning the same format as the source image), "JPG", "PNG", "WEBP" and "AVIF".
    The default value is [AUTO, WEBP], and you should rarely need to change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    formats: [ImageFormat],
    """

    The display height of the generated image for layout = FIXED, and the maximum display height of the largest image for layout = CONSTRAINED.
    The image will be cropped if the aspect ratio does not match the source image. If omitted, it is calculated from the supplied width,
    matching the aspect ratio of the source image.
    """
    height: Int,
    "Options to pass to sharp when generating JPG images."
    jpgOptions: JPGOptions,
    """

    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: ImageLayout = CONSTRAINED,
    """

    A list of image pixel densities to generate. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for FIXED images, meaning 1x and 2x and [0.25, 0.5, 1, 2] for CONSTRAINED. In this case, an image with a constrained layout
    and width = 400 would generate images at 100, 200, 400 and 800px wide. Ignored for FULL_WIDTH images, which use breakpoints instead
    """
    outputPixelDensities: [Float],
    """

    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).
    TRACED_SVG: deprecated. Will use DOMINANT_COLOR.
    NONE: no placeholder. Set "background" to use a fixed background color.
    """
    placeholder: ImagePlaceholder,
    "Options to pass to sharp when generating PNG images."
    pngOptions: PNGOptions,
    "The default quality. This is overridden by any format-specific options"
    quality: Int,
    """

    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download.
    You should usually leave this blank, and a suitable value will be calculated. The exception is if a FULL_WIDTH image
    does not actually span the full width of the screen, in which case you should pass the correct size here.
    """
    sizes: String,
    "Options for traced placeholder SVGs. You also should set placeholder to \"TRACED_SVG\"."
    tracedSVGOptions: Potrace,
    "Options to pass to sharp to control cropping and other image manipulations."
    transformOptions: TransformOptions,
    "Options to pass to sharp when generating WebP images."
    webpOptions: WebPOptions,
    """

    The display width of the generated image for layout = FIXED, and the maximum display width of the largest image for layout = CONSTRAINED.
    Ignored if layout = FLUID.
    """
    width: Int
  ): GatsbyImageData!
  id: ID!
  internal: Internal!
  original: ImageSharpOriginal
  parent: Node
  resize(background: String = "rgba(0,0,0,1)", base64: Boolean = false, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient, fit: ImageFit = COVER, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, jpegQuality: Int, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, pngQuality: Int, quality: Int, rotate: Int = 0, toFormat: ImageFormat = AUTO, traceSVG: Potrace, trim: Float = 0.0, webpQuality: Int, width: Int): ImageSharpResize
}

type ImageSharpConnection {
  distinct(field: ImageSharpFieldSelector!): [String!]!
  edges: [ImageSharpEdge!]!
  group(field: ImageSharpFieldSelector!, limit: Int, skip: Int): [ImageSharpGroupConnection!]!
  max(field: ImageSharpFieldSelector!): Float
  min(field: ImageSharpFieldSelector!): Float
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  sum(field: ImageSharpFieldSelector!): Float
  totalCount: Int!
}

type ImageSharpEdge {
  next: ImageSharp
  node: ImageSharp!
  previous: ImageSharp
}

type ImageSharpFixed {
  aspectRatio: Float
  base64: String
  height: Float!
  originalName: String
  src: String!
  srcSet: String!
  srcSetWebp: String
  srcWebp: String
  tracedSVG: String
  width: Float!
}

type ImageSharpFluid {
  aspectRatio: Float!
  base64: String
  originalImg: String
  originalName: String
  presentationHeight: Int!
  presentationWidth: Int!
  sizes: String!
  src: String!
  srcSet: String!
  srcSetWebp: String
  srcWebp: String
  tracedSVG: String
}

type ImageSharpGroupConnection {
  distinct(field: ImageSharpFieldSelector!): [String!]!
  edges: [ImageSharpEdge!]!
  field: String!
  fieldValue: String
  group(field: ImageSharpFieldSelector!, limit: Int, skip: Int): [ImageSharpGroupConnection!]!
  max(field: ImageSharpFieldSelector!): Float
  min(field: ImageSharpFieldSelector!): Float
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  sum(field: ImageSharpFieldSelector!): Float
  totalCount: Int!
}

type ImageSharpOriginal {
  height: Float
  src: String
  width: Float
}

type ImageSharpResize {
  aspectRatio: Float
  height: Int
  originalName: String
  src: String
  tracedSVG: String
  width: Int
}

type Internal {
  content: String
  contentDigest: String!
  contentFilePath: String
  description: String
  fieldOwners: [String]
  ignoreType: Boolean
  mediaType: String
  owner: String!
  type: String!
}

type PageInfo {
  currentPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  itemCount: Int!
  pageCount: Int!
  perPage: Int
  totalCount: Int!
}

type Query {
  allContentfulAddress(filter: ContentfulAddressFilterInput, limit: Int, skip: Int, sort: [ContentfulAddressSortInput]): ContentfulAddressConnection!
  allContentfulArticles(filter: ContentfulArticlesFilterInput, limit: Int, skip: Int, sort: [ContentfulArticlesSortInput]): ContentfulArticlesConnection!
  allContentfulAsset(filter: ContentfulAssetFilterInput, limit: Int, skip: Int, sort: [ContentfulAssetSortInput]): ContentfulAssetConnection!
  allContentfulCategories(filter: ContentfulCategoriesFilterInput, limit: Int, skip: Int, sort: [ContentfulCategoriesSortInput]): ContentfulCategoriesConnection!
  allContentfulContentType(filter: ContentfulContentTypeFilterInput, limit: Int, skip: Int, sort: [ContentfulContentTypeSortInput]): ContentfulContentTypeConnection!
  allContentfulEntry(filter: ContentfulEntryFilterInput, limit: Int, skip: Int, sort: [ContentfulEntrySortInput]): ContentfulEntryConnection!
  allContentfulJobs(filter: ContentfulJobsFilterInput, limit: Int, skip: Int, sort: [ContentfulJobsSortInput]): ContentfulJobsConnection!
  allContentfulJobsDescriptionTextNode(filter: contentfulJobsDescriptionTextNodeFilterInput, limit: Int, skip: Int, sort: [contentfulJobsDescriptionTextNodeSortInput]): contentfulJobsDescriptionTextNodeConnection!
  allContentfulOffer(filter: ContentfulOfferFilterInput, limit: Int, skip: Int, sort: [ContentfulOfferSortInput]): ContentfulOfferConnection!
  allContentfulPage(filter: ContentfulPageFilterInput, limit: Int, skip: Int, sort: [ContentfulPageSortInput]): ContentfulPageConnection!
  allContentfulRedirect(filter: ContentfulRedirectFilterInput, limit: Int, skip: Int, sort: [ContentfulRedirectSortInput]): ContentfulRedirectConnection!
  allContentfulService(filter: ContentfulServiceFilterInput, limit: Int, skip: Int, sort: [ContentfulServiceSortInput]): ContentfulServiceConnection!
  allContentfulServices(filter: ContentfulServicesFilterInput, limit: Int, skip: Int, sort: [ContentfulServicesSortInput]): ContentfulServicesConnection!
  allContentfulServicesCp(filter: ContentfulServicesCpFilterInput, limit: Int, skip: Int, sort: [ContentfulServicesCpSortInput]): ContentfulServicesCpConnection!
  allContentfulServicesCpContentJsonNode(filter: contentfulServicesCpContentJsonNodeFilterInput, limit: Int, skip: Int, sort: [contentfulServicesCpContentJsonNodeSortInput]): contentfulServicesCpContentJsonNodeConnection!
  allContentfulSignature(filter: ContentfulSignatureFilterInput, limit: Int, skip: Int, sort: [ContentfulSignatureSortInput]): ContentfulSignatureConnection!
  allContentfulSignatureLogo(filter: ContentfulSignatureLogoFilterInput, limit: Int, skip: Int, sort: [ContentfulSignatureLogoSortInput]): ContentfulSignatureLogoConnection!
  allDirectory(filter: DirectoryFilterInput, limit: Int, skip: Int, sort: [DirectorySortInput]): DirectoryConnection!
  allFile(filter: FileFilterInput, limit: Int, skip: Int, sort: [FileSortInput]): FileConnection!
  allImageSharp(filter: ImageSharpFilterInput, limit: Int, skip: Int, sort: [ImageSharpSortInput]): ImageSharpConnection!
  allSite(filter: SiteFilterInput, limit: Int, skip: Int, sort: [SiteSortInput]): SiteConnection!
  allSiteBuildMetadata(filter: SiteBuildMetadataFilterInput, limit: Int, skip: Int, sort: [SiteBuildMetadataSortInput]): SiteBuildMetadataConnection!
  allSiteFunction(filter: SiteFunctionFilterInput, limit: Int, skip: Int, sort: [SiteFunctionSortInput]): SiteFunctionConnection!
  allSitePage(filter: SitePageFilterInput, limit: Int, skip: Int, sort: [SitePageSortInput]): SitePageConnection!
  allSitePlugin(filter: SitePluginFilterInput, limit: Int, skip: Int, sort: [SitePluginSortInput]): SitePluginConnection!
  contentfulAddress(children: NodeFilterListInput, city: StringQueryOperatorInput, contentful_id: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, name: StringQueryOperatorInput, node_locale: StringQueryOperatorInput, parent: NodeFilterInput, phone: StringQueryOperatorInput, position: ContentfulAddressPositionFilterInput, spaceId: StringQueryOperatorInput, street: StringQueryOperatorInput, sys: ContentfulAddressSysFilterInput, updatedAt: DateQueryOperatorInput, zip: StringQueryOperatorInput): ContentfulAddress
  contentfulArticles(category: ContentfulCategoriesFilterInput, children: NodeFilterListInput, content: ContentfulArticlesContentFilterInput, contentful_id: StringQueryOperatorInput, cover: ContentfulAssetFilterInput, createdAt: DateQueryOperatorInput, date: DateQueryOperatorInput, description: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, name: StringQueryOperatorInput, node_locale: StringQueryOperatorInput, parent: NodeFilterInput, slug: StringQueryOperatorInput, spaceId: StringQueryOperatorInput, sys: ContentfulArticlesSysFilterInput, updatedAt: DateQueryOperatorInput): ContentfulArticles
  contentfulAsset(children: NodeFilterListInput, contentful_id: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, description: StringQueryOperatorInput, file: ContentfulAssetFileFilterInput, filename: StringQueryOperatorInput, filesize: IntQueryOperatorInput, gatsbyImage: GatsbyImageDataQueryOperatorInput, gatsbyImageData: GatsbyImageDataQueryOperatorInput, height: IntQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, mimeType: StringQueryOperatorInput, node_locale: StringQueryOperatorInput, parent: NodeFilterInput, placeholderUrl: StringQueryOperatorInput, publicUrl: StringQueryOperatorInput, resize: RemoteFileResizeFilterInput, size: IntQueryOperatorInput, spaceId: StringQueryOperatorInput, sys: ContentfulAssetSysFilterInput, title: StringQueryOperatorInput, updatedAt: DateQueryOperatorInput, url: StringQueryOperatorInput, width: IntQueryOperatorInput): ContentfulAsset
  contentfulCategories(articles: ContentfulArticlesFilterListInput, children: NodeFilterListInput, contentful_id: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, name: StringQueryOperatorInput, node_locale: StringQueryOperatorInput, parent: NodeFilterInput, spaceId: StringQueryOperatorInput, sys: ContentfulCategoriesSysFilterInput, updatedAt: DateQueryOperatorInput): ContentfulCategories
  contentfulContentType(children: NodeFilterListInput, description: StringQueryOperatorInput, displayField: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, name: StringQueryOperatorInput, parent: NodeFilterInput, sys: ContentfulContentTypeSysFilterInput): ContentfulContentType
  contentfulEntry(children: NodeFilterListInput, contentful_id: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, node_locale: StringQueryOperatorInput, parent: NodeFilterInput): ContentfulEntry
  contentfulJobs(childContentfulJobsDescriptionTextNode: contentfulJobsDescriptionTextNodeFilterInput, children: NodeFilterListInput, childrenContentfulJobsDescriptionTextNode: contentfulJobsDescriptionTextNodeFilterListInput, content: ContentfulJobsContentFilterInput, contentful_id: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, date: DateQueryOperatorInput, description: contentfulJobsDescriptionTextNodeFilterInput, file: ContentfulAssetFilterInput, id: StringQueryOperatorInput, internal: InternalFilterInput, node_locale: StringQueryOperatorInput, parent: NodeFilterInput, slug: StringQueryOperatorInput, spaceId: StringQueryOperatorInput, sys: ContentfulJobsSysFilterInput, title: StringQueryOperatorInput, updatedAt: DateQueryOperatorInput): ContentfulJobs
  contentfulJobsDescriptionTextNode(children: NodeFilterListInput, description: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput, sys: contentfulJobsDescriptionTextNodeSysFilterInput): contentfulJobsDescriptionTextNode
  contentfulOffer(children: NodeFilterListInput, content: ContentfulOfferContentFilterInput, contentful_id: StringQueryOperatorInput, cover: ContentfulAssetFilterInput, createdAt: DateQueryOperatorInput, description: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, name: StringQueryOperatorInput, node_locale: StringQueryOperatorInput, parent: NodeFilterInput, services: StringQueryOperatorInput, slug: StringQueryOperatorInput, spaceId: StringQueryOperatorInput, sys: ContentfulOfferSysFilterInput, updatedAt: DateQueryOperatorInput): ContentfulOffer
  contentfulPage(children: NodeFilterListInput, contentful_id: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, node_locale: StringQueryOperatorInput, parent: NodeFilterInput, seo_description: StringQueryOperatorInput, seo_title: StringQueryOperatorInput, slug: StringQueryOperatorInput, spaceId: StringQueryOperatorInput, sys: ContentfulPageSysFilterInput, updatedAt: DateQueryOperatorInput): ContentfulPage
  contentfulRedirect(children: NodeFilterListInput, contentful_id: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, from: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, node_locale: StringQueryOperatorInput, parent: NodeFilterInput, spaceId: StringQueryOperatorInput, sys: ContentfulRedirectSysFilterInput, to: StringQueryOperatorInput, updatedAt: DateQueryOperatorInput): ContentfulRedirect
  contentfulService(children: NodeFilterListInput, content: ContentfulServiceContentFilterInput, contentful_id: StringQueryOperatorInput, cover: ContentfulAssetFilterInput, createdAt: DateQueryOperatorInput, description: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, name: StringQueryOperatorInput, node_locale: StringQueryOperatorInput, parent: NodeFilterInput, services: StringQueryOperatorInput, slug: StringQueryOperatorInput, spaceId: StringQueryOperatorInput, sys: ContentfulServiceSysFilterInput, updatedAt: DateQueryOperatorInput): ContentfulService
  contentfulServices(children: NodeFilterListInput, contentful_id: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, name: StringQueryOperatorInput, node_locale: StringQueryOperatorInput, order: IntQueryOperatorInput, parent: NodeFilterInput, slug: StringQueryOperatorInput, spaceId: StringQueryOperatorInput, sys: ContentfulServicesSysFilterInput, text: ContentfulServicesTextFilterInput, title: StringQueryOperatorInput, updatedAt: DateQueryOperatorInput): ContentfulServices
  contentfulServicesCp(childContentfulServicesCpContentJsonNode: contentfulServicesCpContentJsonNodeFilterInput, children: NodeFilterListInput, childrenContentfulServicesCpContentJsonNode: contentfulServicesCpContentJsonNodeFilterListInput, content: contentfulServicesCpContentJsonNodeFilterListInput, contentful_id: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, id: StringQueryOperatorInput, image: ContentfulAssetFilterInput, internal: InternalFilterInput, name: StringQueryOperatorInput, node_locale: StringQueryOperatorInput, order: IntQueryOperatorInput, parent: NodeFilterInput, slug: StringQueryOperatorInput, spaceId: StringQueryOperatorInput, sys: ContentfulServicesCpSysFilterInput, updatedAt: DateQueryOperatorInput): ContentfulServicesCp
  contentfulServicesCpContentJsonNode(children: NodeFilterListInput, content: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput, sys: contentfulServicesCpContentJsonNodeSysFilterInput, title: StringQueryOperatorInput): contentfulServicesCpContentJsonNode
  contentfulSignature(children: NodeFilterListInput, contentful_id: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, firstName: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lastName: StringQueryOperatorInput, legal: BooleanQueryOperatorInput, node_locale: StringQueryOperatorInput, parent: NodeFilterInput, spaceId: StringQueryOperatorInput, sys: ContentfulSignatureSysFilterInput, title: StringQueryOperatorInput, updatedAt: DateQueryOperatorInput): ContentfulSignature
  contentfulSignatureLogo(children: NodeFilterListInput, contentful_id: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, logo: ContentfulAssetFilterInput, name: StringQueryOperatorInput, node_locale: StringQueryOperatorInput, parent: NodeFilterInput, spaceId: StringQueryOperatorInput, sys: ContentfulSignatureLogoSysFilterInput, updatedAt: DateQueryOperatorInput): ContentfulSignatureLogo
  directory(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, changeTime: DateQueryOperatorInput, children: NodeFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput): Directory
  file(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, changeTime: DateQueryOperatorInput, childImageSharp: ImageSharpFilterInput, children: NodeFilterListInput, childrenImageSharp: ImageSharpFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, publicURL: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput): File
  imageSharp(children: NodeFilterListInput, fixed: ImageSharpFixedFilterInput, fluid: ImageSharpFluidFilterInput, gatsbyImageData: GatsbyImageDataQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, original: ImageSharpOriginalFilterInput, parent: NodeFilterInput, resize: ImageSharpResizeFilterInput): ImageSharp
  site(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, graphqlTypegen: BooleanQueryOperatorInput, host: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, jsxRuntime: StringQueryOperatorInput, parent: NodeFilterInput, pathPrefix: StringQueryOperatorInput, polyfill: BooleanQueryOperatorInput, port: IntQueryOperatorInput, siteMetadata: SiteSiteMetadataFilterInput, trailingSlash: StringQueryOperatorInput): Site
  siteBuildMetadata(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput): SiteBuildMetadata
  siteFunction(absoluteCompiledFilePath: StringQueryOperatorInput, children: NodeFilterListInput, functionRoute: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, matchPath: StringQueryOperatorInput, originalAbsoluteFilePath: StringQueryOperatorInput, originalRelativeFilePath: StringQueryOperatorInput, parent: NodeFilterInput, pluginName: StringQueryOperatorInput, relativeCompiledFilePath: StringQueryOperatorInput): SiteFunction
  sitePage(children: NodeFilterListInput, component: StringQueryOperatorInput, componentChunkName: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, internalComponentName: StringQueryOperatorInput, matchPath: StringQueryOperatorInput, pageContext: JSONQueryOperatorInput, parent: NodeFilterInput, path: StringQueryOperatorInput, pluginCreator: SitePluginFilterInput): SitePage
  sitePlugin(browserAPIs: StringQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, name: StringQueryOperatorInput, nodeAPIs: StringQueryOperatorInput, packageJson: JSONQueryOperatorInput, parent: NodeFilterInput, pluginFilepath: StringQueryOperatorInput, pluginOptions: JSONQueryOperatorInput, resolve: StringQueryOperatorInput, ssrAPIs: StringQueryOperatorInput, version: StringQueryOperatorInput): SitePlugin
}

type RemoteFileResize {
  height: Int
  src: String
  width: Int
}

type Site implements Node {
  buildTime(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
  children: [Node!]!
  graphqlTypegen: Boolean
  host: String
  id: ID!
  internal: Internal!
  jsxRuntime: String
  parent: Node
  pathPrefix: String
  polyfill: Boolean
  port: Int
  siteMetadata: SiteSiteMetadata
  trailingSlash: String
}

type SiteBuildMetadata implements Node {
  buildTime(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
  children: [Node!]!
  id: ID!
  internal: Internal!
  parent: Node
}

type SiteBuildMetadataConnection {
  distinct(field: SiteBuildMetadataFieldSelector!): [String!]!
  edges: [SiteBuildMetadataEdge!]!
  group(field: SiteBuildMetadataFieldSelector!, limit: Int, skip: Int): [SiteBuildMetadataGroupConnection!]!
  max(field: SiteBuildMetadataFieldSelector!): Float
  min(field: SiteBuildMetadataFieldSelector!): Float
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  sum(field: SiteBuildMetadataFieldSelector!): Float
  totalCount: Int!
}

type SiteBuildMetadataEdge {
  next: SiteBuildMetadata
  node: SiteBuildMetadata!
  previous: SiteBuildMetadata
}

type SiteBuildMetadataGroupConnection {
  distinct(field: SiteBuildMetadataFieldSelector!): [String!]!
  edges: [SiteBuildMetadataEdge!]!
  field: String!
  fieldValue: String
  group(field: SiteBuildMetadataFieldSelector!, limit: Int, skip: Int): [SiteBuildMetadataGroupConnection!]!
  max(field: SiteBuildMetadataFieldSelector!): Float
  min(field: SiteBuildMetadataFieldSelector!): Float
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  sum(field: SiteBuildMetadataFieldSelector!): Float
  totalCount: Int!
}

type SiteConnection {
  distinct(field: SiteFieldSelector!): [String!]!
  edges: [SiteEdge!]!
  group(field: SiteFieldSelector!, limit: Int, skip: Int): [SiteGroupConnection!]!
  max(field: SiteFieldSelector!): Float
  min(field: SiteFieldSelector!): Float
  nodes: [Site!]!
  pageInfo: PageInfo!
  sum(field: SiteFieldSelector!): Float
  totalCount: Int!
}

type SiteEdge {
  next: Site
  node: Site!
  previous: Site
}

type SiteFunction implements Node {
  absoluteCompiledFilePath: String!
  children: [Node!]!
  functionRoute: String!
  id: ID!
  internal: Internal!
  matchPath: String
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  parent: Node
  pluginName: String!
  relativeCompiledFilePath: String!
}

type SiteFunctionConnection {
  distinct(field: SiteFunctionFieldSelector!): [String!]!
  edges: [SiteFunctionEdge!]!
  group(field: SiteFunctionFieldSelector!, limit: Int, skip: Int): [SiteFunctionGroupConnection!]!
  max(field: SiteFunctionFieldSelector!): Float
  min(field: SiteFunctionFieldSelector!): Float
  nodes: [SiteFunction!]!
  pageInfo: PageInfo!
  sum(field: SiteFunctionFieldSelector!): Float
  totalCount: Int!
}

type SiteFunctionEdge {
  next: SiteFunction
  node: SiteFunction!
  previous: SiteFunction
}

type SiteFunctionGroupConnection {
  distinct(field: SiteFunctionFieldSelector!): [String!]!
  edges: [SiteFunctionEdge!]!
  field: String!
  fieldValue: String
  group(field: SiteFunctionFieldSelector!, limit: Int, skip: Int): [SiteFunctionGroupConnection!]!
  max(field: SiteFunctionFieldSelector!): Float
  min(field: SiteFunctionFieldSelector!): Float
  nodes: [SiteFunction!]!
  pageInfo: PageInfo!
  sum(field: SiteFunctionFieldSelector!): Float
  totalCount: Int!
}

type SiteGroupConnection {
  distinct(field: SiteFieldSelector!): [String!]!
  edges: [SiteEdge!]!
  field: String!
  fieldValue: String
  group(field: SiteFieldSelector!, limit: Int, skip: Int): [SiteGroupConnection!]!
  max(field: SiteFieldSelector!): Float
  min(field: SiteFieldSelector!): Float
  nodes: [Site!]!
  pageInfo: PageInfo!
  sum(field: SiteFieldSelector!): Float
  totalCount: Int!
}

type SitePage implements Node {
  children: [Node!]!
  component: String!
  componentChunkName: String!
  id: ID!
  internal: Internal!
  internalComponentName: String!
  matchPath: String
  pageContext: JSON
  parent: Node
  path: String!
  pluginCreator: SitePlugin
}

type SitePageConnection {
  distinct(field: SitePageFieldSelector!): [String!]!
  edges: [SitePageEdge!]!
  group(field: SitePageFieldSelector!, limit: Int, skip: Int): [SitePageGroupConnection!]!
  max(field: SitePageFieldSelector!): Float
  min(field: SitePageFieldSelector!): Float
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  sum(field: SitePageFieldSelector!): Float
  totalCount: Int!
}

type SitePageEdge {
  next: SitePage
  node: SitePage!
  previous: SitePage
}

type SitePageGroupConnection {
  distinct(field: SitePageFieldSelector!): [String!]!
  edges: [SitePageEdge!]!
  field: String!
  fieldValue: String
  group(field: SitePageFieldSelector!, limit: Int, skip: Int): [SitePageGroupConnection!]!
  max(field: SitePageFieldSelector!): Float
  min(field: SitePageFieldSelector!): Float
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  sum(field: SitePageFieldSelector!): Float
  totalCount: Int!
}

type SitePlugin implements Node {
  browserAPIs: [String]
  children: [Node!]!
  id: ID!
  internal: Internal!
  name: String
  nodeAPIs: [String]
  packageJson: JSON
  parent: Node
  pluginFilepath: String
  pluginOptions: JSON
  resolve: String
  ssrAPIs: [String]
  version: String
}

type SitePluginConnection {
  distinct(field: SitePluginFieldSelector!): [String!]!
  edges: [SitePluginEdge!]!
  group(field: SitePluginFieldSelector!, limit: Int, skip: Int): [SitePluginGroupConnection!]!
  max(field: SitePluginFieldSelector!): Float
  min(field: SitePluginFieldSelector!): Float
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  sum(field: SitePluginFieldSelector!): Float
  totalCount: Int!
}

type SitePluginEdge {
  next: SitePlugin
  node: SitePlugin!
  previous: SitePlugin
}

type SitePluginGroupConnection {
  distinct(field: SitePluginFieldSelector!): [String!]!
  edges: [SitePluginEdge!]!
  field: String!
  fieldValue: String
  group(field: SitePluginFieldSelector!, limit: Int, skip: Int): [SitePluginGroupConnection!]!
  max(field: SitePluginFieldSelector!): Float
  min(field: SitePluginFieldSelector!): Float
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  sum(field: SitePluginFieldSelector!): Float
  totalCount: Int!
}

type SiteSiteMetadata {
  author: String
  description: String
  siteUrl: String
  title: String
}

type contentfulJobsDescriptionTextNode implements Node {
  children: [Node!]!
  description: String
  id: ID!
  internal: Internal!
  parent: Node
  sys: contentfulJobsDescriptionTextNodeSys
}

type contentfulJobsDescriptionTextNodeConnection {
  distinct(field: contentfulJobsDescriptionTextNodeFieldSelector!): [String!]!
  edges: [contentfulJobsDescriptionTextNodeEdge!]!
  group(field: contentfulJobsDescriptionTextNodeFieldSelector!, limit: Int, skip: Int): [contentfulJobsDescriptionTextNodeGroupConnection!]!
  max(field: contentfulJobsDescriptionTextNodeFieldSelector!): Float
  min(field: contentfulJobsDescriptionTextNodeFieldSelector!): Float
  nodes: [contentfulJobsDescriptionTextNode!]!
  pageInfo: PageInfo!
  sum(field: contentfulJobsDescriptionTextNodeFieldSelector!): Float
  totalCount: Int!
}

type contentfulJobsDescriptionTextNodeEdge {
  next: contentfulJobsDescriptionTextNode
  node: contentfulJobsDescriptionTextNode!
  previous: contentfulJobsDescriptionTextNode
}

type contentfulJobsDescriptionTextNodeGroupConnection {
  distinct(field: contentfulJobsDescriptionTextNodeFieldSelector!): [String!]!
  edges: [contentfulJobsDescriptionTextNodeEdge!]!
  field: String!
  fieldValue: String
  group(field: contentfulJobsDescriptionTextNodeFieldSelector!, limit: Int, skip: Int): [contentfulJobsDescriptionTextNodeGroupConnection!]!
  max(field: contentfulJobsDescriptionTextNodeFieldSelector!): Float
  min(field: contentfulJobsDescriptionTextNodeFieldSelector!): Float
  nodes: [contentfulJobsDescriptionTextNode!]!
  pageInfo: PageInfo!
  sum(field: contentfulJobsDescriptionTextNodeFieldSelector!): Float
  totalCount: Int!
}

type contentfulJobsDescriptionTextNodeSys {
  type: String
}

type contentfulServicesCpContentJsonNode implements Node {
  children: [Node!]!
  content: String
  id: ID!
  internal: Internal!
  parent: Node
  sys: contentfulServicesCpContentJsonNodeSys
  title: String
}

type contentfulServicesCpContentJsonNodeConnection {
  distinct(field: contentfulServicesCpContentJsonNodeFieldSelector!): [String!]!
  edges: [contentfulServicesCpContentJsonNodeEdge!]!
  group(field: contentfulServicesCpContentJsonNodeFieldSelector!, limit: Int, skip: Int): [contentfulServicesCpContentJsonNodeGroupConnection!]!
  max(field: contentfulServicesCpContentJsonNodeFieldSelector!): Float
  min(field: contentfulServicesCpContentJsonNodeFieldSelector!): Float
  nodes: [contentfulServicesCpContentJsonNode!]!
  pageInfo: PageInfo!
  sum(field: contentfulServicesCpContentJsonNodeFieldSelector!): Float
  totalCount: Int!
}

type contentfulServicesCpContentJsonNodeEdge {
  next: contentfulServicesCpContentJsonNode
  node: contentfulServicesCpContentJsonNode!
  previous: contentfulServicesCpContentJsonNode
}

type contentfulServicesCpContentJsonNodeGroupConnection {
  distinct(field: contentfulServicesCpContentJsonNodeFieldSelector!): [String!]!
  edges: [contentfulServicesCpContentJsonNodeEdge!]!
  field: String!
  fieldValue: String
  group(field: contentfulServicesCpContentJsonNodeFieldSelector!, limit: Int, skip: Int): [contentfulServicesCpContentJsonNodeGroupConnection!]!
  max(field: contentfulServicesCpContentJsonNodeFieldSelector!): Float
  min(field: contentfulServicesCpContentJsonNodeFieldSelector!): Float
  nodes: [contentfulServicesCpContentJsonNode!]!
  pageInfo: PageInfo!
  sum(field: contentfulServicesCpContentJsonNodeFieldSelector!): Float
  totalCount: Int!
}

type contentfulServicesCpContentJsonNodeSys {
  type: String
}

enum ContentfulImageCropFocus {
  BOTTOM
  BOTTOM_LEFT
  BOTTOM_RIGHT
  CENTER
  FACE
  FACES
  LEFT
  RIGHT
  TOP
  TOP_LEFT
  TOP_RIGHT
}

enum FieldSelectorEnum {
  SELECT
}

enum GatsbyImageFormat {
  AUTO
  AVIF
  JPG
  NO_CHANGE
  PNG
  WEBP
}

enum GatsbyImageLayout {
  CONSTRAINED
  FIXED
  FULL_WIDTH
}

enum GatsbyImagePlaceholder {
  BLURRED
  DOMINANT_COLOR
  NONE
  TRACED_SVG
}

enum ImageCropFocus {
  ATTENTION
  CENTER
  EAST
  ENTROPY
  NORTH
  NORTHEAST
  NORTHWEST
  SOUTH
  SOUTHEAST
  SOUTHWEST
  WEST
}

enum ImageFit {
  CONTAIN
  COVER
  FILL
  INSIDE
  OUTSIDE
}

enum ImageFormat {
  AUTO
  AVIF
  JPG
  NO_CHANGE
  PNG
  WEBP
}

enum ImageLayout {
  CONSTRAINED
  FIXED
  FULL_WIDTH
}

enum ImagePlaceholder {
  BLURRED
  DOMINANT_COLOR
  NONE
  TRACED_SVG
}

enum ImageResizingBehavior {
  "Crop a part of the original image to match the specified size."
  CROP
  "Crop the image to the specified dimensions, if the original image is smaller than these dimensions, then the image will be upscaled."
  FILL
  NO_CHANGE
  "Same as the default resizing, but adds padding so that the generated image has the specified dimensions."
  PAD
  "Scale the image regardless of the original aspect ratio."
  SCALE
  "When used in association with the f parameter below, creates a thumbnail from the image based on a focus area."
  THUMB
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_LEFT
  TURNPOLICY_MAJORITY
  TURNPOLICY_MINORITY
  TURNPOLICY_RIGHT
  TURNPOLICY_WHITE
}

enum RemoteFileCropFocus {
  BOTTOM
  CENTER
  EDGES
  ENTROPY
  FACES
  LEFT
  RIGHT
  TOP
}

enum RemoteFileFit {
  CONTAIN
  COVER
  FILL
  OUTSIDE
}

enum RemoteFileFormat {
  AUTO
  AVIF
  JPG
  PNG
  WEBP
}

enum RemoteFileLayout {
  CONSTRAINED
  FIXED
  FULL_WIDTH
}

enum RemoteFilePlaceholder {
  BLURRED
  DOMINANT_COLOR
  NONE
  TRACED_SVG
}

enum SortOrderEnum {
  ASC
  DESC
}

"A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

scalar GatsbyImageData

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

input AVIFOptions {
  lossless: Boolean
  quality: Int
  speed: Int
}

input BlurredOptions {
  "Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this"
  toFormat: ImageFormat
  "Width of the generated low-res preview. Default is 20px"
  width: Int
}

input BooleanQueryOperatorInput {
  eq: Boolean
  in: [Boolean]
  ne: Boolean
  nin: [Boolean]
}

input ContentfulAddressFieldSelector {
  children: NodeFieldSelector
  city: FieldSelectorEnum
  contentful_id: FieldSelectorEnum
  createdAt: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  name: FieldSelectorEnum
  node_locale: FieldSelectorEnum
  parent: NodeFieldSelector
  phone: FieldSelectorEnum
  position: ContentfulAddressPositionFieldSelector
  spaceId: FieldSelectorEnum
  street: FieldSelectorEnum
  sys: ContentfulAddressSysFieldSelector
  updatedAt: FieldSelectorEnum
  zip: FieldSelectorEnum
}

input ContentfulAddressFilterInput {
  children: NodeFilterListInput
  city: StringQueryOperatorInput
  contentful_id: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  name: StringQueryOperatorInput
  node_locale: StringQueryOperatorInput
  parent: NodeFilterInput
  phone: StringQueryOperatorInput
  position: ContentfulAddressPositionFilterInput
  spaceId: StringQueryOperatorInput
  street: StringQueryOperatorInput
  sys: ContentfulAddressSysFilterInput
  updatedAt: DateQueryOperatorInput
  zip: StringQueryOperatorInput
}

input ContentfulAddressPositionFieldSelector {
  lat: FieldSelectorEnum
  lon: FieldSelectorEnum
}

input ContentfulAddressPositionFilterInput {
  lat: FloatQueryOperatorInput
  lon: FloatQueryOperatorInput
}

input ContentfulAddressPositionSortInput {
  lat: SortOrderEnum
  lon: SortOrderEnum
}

input ContentfulAddressSortInput {
  children: NodeSortInput
  city: SortOrderEnum
  contentful_id: SortOrderEnum
  createdAt: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  name: SortOrderEnum
  node_locale: SortOrderEnum
  parent: NodeSortInput
  phone: SortOrderEnum
  position: ContentfulAddressPositionSortInput
  spaceId: SortOrderEnum
  street: SortOrderEnum
  sys: ContentfulAddressSysSortInput
  updatedAt: SortOrderEnum
  zip: SortOrderEnum
}

input ContentfulAddressSysContentTypeFieldSelector {
  sys: ContentfulAddressSysContentTypeSysFieldSelector
}

input ContentfulAddressSysContentTypeFilterInput {
  sys: ContentfulAddressSysContentTypeSysFilterInput
}

input ContentfulAddressSysContentTypeSortInput {
  sys: ContentfulAddressSysContentTypeSysSortInput
}

input ContentfulAddressSysContentTypeSysFieldSelector {
  id: FieldSelectorEnum
  linkType: FieldSelectorEnum
  type: FieldSelectorEnum
}

input ContentfulAddressSysContentTypeSysFilterInput {
  id: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

input ContentfulAddressSysContentTypeSysSortInput {
  id: SortOrderEnum
  linkType: SortOrderEnum
  type: SortOrderEnum
}

input ContentfulAddressSysFieldSelector {
  contentType: ContentfulAddressSysContentTypeFieldSelector
  revision: FieldSelectorEnum
  type: FieldSelectorEnum
}

input ContentfulAddressSysFilterInput {
  contentType: ContentfulAddressSysContentTypeFilterInput
  revision: IntQueryOperatorInput
  type: StringQueryOperatorInput
}

input ContentfulAddressSysSortInput {
  contentType: ContentfulAddressSysContentTypeSortInput
  revision: SortOrderEnum
  type: SortOrderEnum
}

input ContentfulArticlesContentFieldSelector {
  raw: FieldSelectorEnum
}

input ContentfulArticlesContentFilterInput {
  raw: StringQueryOperatorInput
}

input ContentfulArticlesContentSortInput {
  raw: SortOrderEnum
}

input ContentfulArticlesFieldSelector {
  category: ContentfulCategoriesFieldSelector
  children: NodeFieldSelector
  content: ContentfulArticlesContentFieldSelector
  contentful_id: FieldSelectorEnum
  cover: ContentfulAssetFieldSelector
  createdAt: FieldSelectorEnum
  date: FieldSelectorEnum
  description: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  name: FieldSelectorEnum
  node_locale: FieldSelectorEnum
  parent: NodeFieldSelector
  slug: FieldSelectorEnum
  spaceId: FieldSelectorEnum
  sys: ContentfulArticlesSysFieldSelector
  updatedAt: FieldSelectorEnum
}

input ContentfulArticlesFilterInput {
  category: ContentfulCategoriesFilterInput
  children: NodeFilterListInput
  content: ContentfulArticlesContentFilterInput
  contentful_id: StringQueryOperatorInput
  cover: ContentfulAssetFilterInput
  createdAt: DateQueryOperatorInput
  date: DateQueryOperatorInput
  description: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  name: StringQueryOperatorInput
  node_locale: StringQueryOperatorInput
  parent: NodeFilterInput
  slug: StringQueryOperatorInput
  spaceId: StringQueryOperatorInput
  sys: ContentfulArticlesSysFilterInput
  updatedAt: DateQueryOperatorInput
}

input ContentfulArticlesFilterListInput {
  elemMatch: ContentfulArticlesFilterInput
}

input ContentfulArticlesSortInput {
  category: ContentfulCategoriesSortInput
  children: NodeSortInput
  content: ContentfulArticlesContentSortInput
  contentful_id: SortOrderEnum
  cover: ContentfulAssetSortInput
  createdAt: SortOrderEnum
  date: SortOrderEnum
  description: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  name: SortOrderEnum
  node_locale: SortOrderEnum
  parent: NodeSortInput
  slug: SortOrderEnum
  spaceId: SortOrderEnum
  sys: ContentfulArticlesSysSortInput
  updatedAt: SortOrderEnum
}

input ContentfulArticlesSysContentTypeFieldSelector {
  sys: ContentfulArticlesSysContentTypeSysFieldSelector
}

input ContentfulArticlesSysContentTypeFilterInput {
  sys: ContentfulArticlesSysContentTypeSysFilterInput
}

input ContentfulArticlesSysContentTypeSortInput {
  sys: ContentfulArticlesSysContentTypeSysSortInput
}

input ContentfulArticlesSysContentTypeSysFieldSelector {
  id: FieldSelectorEnum
  linkType: FieldSelectorEnum
  type: FieldSelectorEnum
}

input ContentfulArticlesSysContentTypeSysFilterInput {
  id: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

input ContentfulArticlesSysContentTypeSysSortInput {
  id: SortOrderEnum
  linkType: SortOrderEnum
  type: SortOrderEnum
}

input ContentfulArticlesSysFieldSelector {
  contentType: ContentfulArticlesSysContentTypeFieldSelector
  revision: FieldSelectorEnum
  type: FieldSelectorEnum
}

input ContentfulArticlesSysFilterInput {
  contentType: ContentfulArticlesSysContentTypeFilterInput
  revision: IntQueryOperatorInput
  type: StringQueryOperatorInput
}

input ContentfulArticlesSysSortInput {
  contentType: ContentfulArticlesSysContentTypeSortInput
  revision: SortOrderEnum
  type: SortOrderEnum
}

input ContentfulAssetFieldSelector {
  children: NodeFieldSelector
  contentful_id: FieldSelectorEnum
  createdAt: FieldSelectorEnum
  description: FieldSelectorEnum
  file: ContentfulAssetFileFieldSelector
  filename: FieldSelectorEnum
  filesize: FieldSelectorEnum
  gatsbyImage: FieldSelectorEnum
  gatsbyImageData: FieldSelectorEnum
  height: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  mimeType: FieldSelectorEnum
  node_locale: FieldSelectorEnum
  parent: NodeFieldSelector
  placeholderUrl: FieldSelectorEnum
  publicUrl: FieldSelectorEnum
  resize: RemoteFileResizeFieldSelector
  size: FieldSelectorEnum
  spaceId: FieldSelectorEnum
  sys: ContentfulAssetSysFieldSelector
  title: FieldSelectorEnum
  updatedAt: FieldSelectorEnum
  url: FieldSelectorEnum
  width: FieldSelectorEnum
}

input ContentfulAssetFileDetailsFieldSelector {
  image: ContentfulAssetFileDetailsImageFieldSelector
  size: FieldSelectorEnum
}

input ContentfulAssetFileDetailsFilterInput {
  image: ContentfulAssetFileDetailsImageFilterInput
  size: IntQueryOperatorInput
}

input ContentfulAssetFileDetailsImageFieldSelector {
  height: FieldSelectorEnum
  width: FieldSelectorEnum
}

input ContentfulAssetFileDetailsImageFilterInput {
  height: IntQueryOperatorInput
  width: IntQueryOperatorInput
}

input ContentfulAssetFileDetailsImageSortInput {
  height: SortOrderEnum
  width: SortOrderEnum
}

input ContentfulAssetFileDetailsSortInput {
  image: ContentfulAssetFileDetailsImageSortInput
  size: SortOrderEnum
}

input ContentfulAssetFileFieldSelector {
  contentType: FieldSelectorEnum
  details: ContentfulAssetFileDetailsFieldSelector
  fileName: FieldSelectorEnum
  url: FieldSelectorEnum
}

input ContentfulAssetFileFilterInput {
  contentType: StringQueryOperatorInput
  details: ContentfulAssetFileDetailsFilterInput
  fileName: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

input ContentfulAssetFileSortInput {
  contentType: SortOrderEnum
  details: ContentfulAssetFileDetailsSortInput
  fileName: SortOrderEnum
  url: SortOrderEnum
}

input ContentfulAssetFilterInput {
  children: NodeFilterListInput
  contentful_id: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  description: StringQueryOperatorInput
  file: ContentfulAssetFileFilterInput
  filename: StringQueryOperatorInput
  filesize: IntQueryOperatorInput
  gatsbyImage: GatsbyImageDataQueryOperatorInput
  gatsbyImageData: GatsbyImageDataQueryOperatorInput
  height: IntQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  mimeType: StringQueryOperatorInput
  node_locale: StringQueryOperatorInput
  parent: NodeFilterInput
  placeholderUrl: StringQueryOperatorInput
  publicUrl: StringQueryOperatorInput
  resize: RemoteFileResizeFilterInput
  size: IntQueryOperatorInput
  spaceId: StringQueryOperatorInput
  sys: ContentfulAssetSysFilterInput
  title: StringQueryOperatorInput
  updatedAt: DateQueryOperatorInput
  url: StringQueryOperatorInput
  width: IntQueryOperatorInput
}

input ContentfulAssetSortInput {
  children: NodeSortInput
  contentful_id: SortOrderEnum
  createdAt: SortOrderEnum
  description: SortOrderEnum
  file: ContentfulAssetFileSortInput
  filename: SortOrderEnum
  filesize: SortOrderEnum
  gatsbyImage: SortOrderEnum
  gatsbyImageData: SortOrderEnum
  height: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  mimeType: SortOrderEnum
  node_locale: SortOrderEnum
  parent: NodeSortInput
  placeholderUrl: SortOrderEnum
  publicUrl: SortOrderEnum
  resize: RemoteFileResizeSortInput
  size: SortOrderEnum
  spaceId: SortOrderEnum
  sys: ContentfulAssetSysSortInput
  title: SortOrderEnum
  updatedAt: SortOrderEnum
  url: SortOrderEnum
  width: SortOrderEnum
}

input ContentfulAssetSysFieldSelector {
  revision: FieldSelectorEnum
  type: FieldSelectorEnum
}

input ContentfulAssetSysFilterInput {
  revision: IntQueryOperatorInput
  type: StringQueryOperatorInput
}

input ContentfulAssetSysSortInput {
  revision: SortOrderEnum
  type: SortOrderEnum
}

input ContentfulCategoriesFieldSelector {
  articles: ContentfulArticlesFieldSelector
  children: NodeFieldSelector
  contentful_id: FieldSelectorEnum
  createdAt: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  name: FieldSelectorEnum
  node_locale: FieldSelectorEnum
  parent: NodeFieldSelector
  spaceId: FieldSelectorEnum
  sys: ContentfulCategoriesSysFieldSelector
  updatedAt: FieldSelectorEnum
}

input ContentfulCategoriesFilterInput {
  articles: ContentfulArticlesFilterListInput
  children: NodeFilterListInput
  contentful_id: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  name: StringQueryOperatorInput
  node_locale: StringQueryOperatorInput
  parent: NodeFilterInput
  spaceId: StringQueryOperatorInput
  sys: ContentfulCategoriesSysFilterInput
  updatedAt: DateQueryOperatorInput
}

input ContentfulCategoriesSortInput {
  articles: ContentfulArticlesSortInput
  children: NodeSortInput
  contentful_id: SortOrderEnum
  createdAt: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  name: SortOrderEnum
  node_locale: SortOrderEnum
  parent: NodeSortInput
  spaceId: SortOrderEnum
  sys: ContentfulCategoriesSysSortInput
  updatedAt: SortOrderEnum
}

input ContentfulCategoriesSysContentTypeFieldSelector {
  sys: ContentfulCategoriesSysContentTypeSysFieldSelector
}

input ContentfulCategoriesSysContentTypeFilterInput {
  sys: ContentfulCategoriesSysContentTypeSysFilterInput
}

input ContentfulCategoriesSysContentTypeSortInput {
  sys: ContentfulCategoriesSysContentTypeSysSortInput
}

input ContentfulCategoriesSysContentTypeSysFieldSelector {
  id: FieldSelectorEnum
  linkType: FieldSelectorEnum
  type: FieldSelectorEnum
}

input ContentfulCategoriesSysContentTypeSysFilterInput {
  id: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

input ContentfulCategoriesSysContentTypeSysSortInput {
  id: SortOrderEnum
  linkType: SortOrderEnum
  type: SortOrderEnum
}

input ContentfulCategoriesSysFieldSelector {
  contentType: ContentfulCategoriesSysContentTypeFieldSelector
  revision: FieldSelectorEnum
  type: FieldSelectorEnum
}

input ContentfulCategoriesSysFilterInput {
  contentType: ContentfulCategoriesSysContentTypeFilterInput
  revision: IntQueryOperatorInput
  type: StringQueryOperatorInput
}

input ContentfulCategoriesSysSortInput {
  contentType: ContentfulCategoriesSysContentTypeSortInput
  revision: SortOrderEnum
  type: SortOrderEnum
}

input ContentfulContentTypeFieldSelector {
  children: NodeFieldSelector
  description: FieldSelectorEnum
  displayField: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  name: FieldSelectorEnum
  parent: NodeFieldSelector
  sys: ContentfulContentTypeSysFieldSelector
}

input ContentfulContentTypeFilterInput {
  children: NodeFilterListInput
  description: StringQueryOperatorInput
  displayField: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  name: StringQueryOperatorInput
  parent: NodeFilterInput
  sys: ContentfulContentTypeSysFilterInput
}

input ContentfulContentTypeSortInput {
  children: NodeSortInput
  description: SortOrderEnum
  displayField: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  name: SortOrderEnum
  parent: NodeSortInput
  sys: ContentfulContentTypeSysSortInput
}

input ContentfulContentTypeSysFieldSelector {
  type: FieldSelectorEnum
}

input ContentfulContentTypeSysFilterInput {
  type: StringQueryOperatorInput
}

input ContentfulContentTypeSysSortInput {
  type: SortOrderEnum
}

input ContentfulEntryFieldSelector {
  children: NodeFieldSelector
  contentful_id: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  node_locale: FieldSelectorEnum
  parent: NodeFieldSelector
}

input ContentfulEntryFilterInput {
  children: NodeFilterListInput
  contentful_id: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  node_locale: StringQueryOperatorInput
  parent: NodeFilterInput
}

input ContentfulEntrySortInput {
  children: NodeSortInput
  contentful_id: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  node_locale: SortOrderEnum
  parent: NodeSortInput
}

input ContentfulJobsContentFieldSelector {
  raw: FieldSelectorEnum
}

input ContentfulJobsContentFilterInput {
  raw: StringQueryOperatorInput
}

input ContentfulJobsContentSortInput {
  raw: SortOrderEnum
}

input ContentfulJobsFieldSelector {
  childContentfulJobsDescriptionTextNode: contentfulJobsDescriptionTextNodeFieldSelector
  children: NodeFieldSelector
  childrenContentfulJobsDescriptionTextNode: contentfulJobsDescriptionTextNodeFieldSelector
  content: ContentfulJobsContentFieldSelector
  contentful_id: FieldSelectorEnum
  createdAt: FieldSelectorEnum
  date: FieldSelectorEnum
  description: contentfulJobsDescriptionTextNodeFieldSelector
  file: ContentfulAssetFieldSelector
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  node_locale: FieldSelectorEnum
  parent: NodeFieldSelector
  slug: FieldSelectorEnum
  spaceId: FieldSelectorEnum
  sys: ContentfulJobsSysFieldSelector
  title: FieldSelectorEnum
  updatedAt: FieldSelectorEnum
}

input ContentfulJobsFilterInput {
  childContentfulJobsDescriptionTextNode: contentfulJobsDescriptionTextNodeFilterInput
  children: NodeFilterListInput
  childrenContentfulJobsDescriptionTextNode: contentfulJobsDescriptionTextNodeFilterListInput
  content: ContentfulJobsContentFilterInput
  contentful_id: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  date: DateQueryOperatorInput
  description: contentfulJobsDescriptionTextNodeFilterInput
  file: ContentfulAssetFilterInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  node_locale: StringQueryOperatorInput
  parent: NodeFilterInput
  slug: StringQueryOperatorInput
  spaceId: StringQueryOperatorInput
  sys: ContentfulJobsSysFilterInput
  title: StringQueryOperatorInput
  updatedAt: DateQueryOperatorInput
}

input ContentfulJobsSortInput {
  childContentfulJobsDescriptionTextNode: contentfulJobsDescriptionTextNodeSortInput
  children: NodeSortInput
  childrenContentfulJobsDescriptionTextNode: contentfulJobsDescriptionTextNodeSortInput
  content: ContentfulJobsContentSortInput
  contentful_id: SortOrderEnum
  createdAt: SortOrderEnum
  date: SortOrderEnum
  description: contentfulJobsDescriptionTextNodeSortInput
  file: ContentfulAssetSortInput
  id: SortOrderEnum
  internal: InternalSortInput
  node_locale: SortOrderEnum
  parent: NodeSortInput
  slug: SortOrderEnum
  spaceId: SortOrderEnum
  sys: ContentfulJobsSysSortInput
  title: SortOrderEnum
  updatedAt: SortOrderEnum
}

input ContentfulJobsSysContentTypeFieldSelector {
  sys: ContentfulJobsSysContentTypeSysFieldSelector
}

input ContentfulJobsSysContentTypeFilterInput {
  sys: ContentfulJobsSysContentTypeSysFilterInput
}

input ContentfulJobsSysContentTypeSortInput {
  sys: ContentfulJobsSysContentTypeSysSortInput
}

input ContentfulJobsSysContentTypeSysFieldSelector {
  id: FieldSelectorEnum
  linkType: FieldSelectorEnum
  type: FieldSelectorEnum
}

input ContentfulJobsSysContentTypeSysFilterInput {
  id: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

input ContentfulJobsSysContentTypeSysSortInput {
  id: SortOrderEnum
  linkType: SortOrderEnum
  type: SortOrderEnum
}

input ContentfulJobsSysFieldSelector {
  contentType: ContentfulJobsSysContentTypeFieldSelector
  revision: FieldSelectorEnum
  type: FieldSelectorEnum
}

input ContentfulJobsSysFilterInput {
  contentType: ContentfulJobsSysContentTypeFilterInput
  revision: IntQueryOperatorInput
  type: StringQueryOperatorInput
}

input ContentfulJobsSysSortInput {
  contentType: ContentfulJobsSysContentTypeSortInput
  revision: SortOrderEnum
  type: SortOrderEnum
}

input ContentfulOfferContentFieldSelector {
  raw: FieldSelectorEnum
}

input ContentfulOfferContentFilterInput {
  raw: StringQueryOperatorInput
}

input ContentfulOfferContentSortInput {
  raw: SortOrderEnum
}

input ContentfulOfferFieldSelector {
  children: NodeFieldSelector
  content: ContentfulOfferContentFieldSelector
  contentful_id: FieldSelectorEnum
  cover: ContentfulAssetFieldSelector
  createdAt: FieldSelectorEnum
  description: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  name: FieldSelectorEnum
  node_locale: FieldSelectorEnum
  parent: NodeFieldSelector
  services: FieldSelectorEnum
  slug: FieldSelectorEnum
  spaceId: FieldSelectorEnum
  sys: ContentfulOfferSysFieldSelector
  updatedAt: FieldSelectorEnum
}

input ContentfulOfferFilterInput {
  children: NodeFilterListInput
  content: ContentfulOfferContentFilterInput
  contentful_id: StringQueryOperatorInput
  cover: ContentfulAssetFilterInput
  createdAt: DateQueryOperatorInput
  description: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  name: StringQueryOperatorInput
  node_locale: StringQueryOperatorInput
  parent: NodeFilterInput
  services: StringQueryOperatorInput
  slug: StringQueryOperatorInput
  spaceId: StringQueryOperatorInput
  sys: ContentfulOfferSysFilterInput
  updatedAt: DateQueryOperatorInput
}

input ContentfulOfferSortInput {
  children: NodeSortInput
  content: ContentfulOfferContentSortInput
  contentful_id: SortOrderEnum
  cover: ContentfulAssetSortInput
  createdAt: SortOrderEnum
  description: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  name: SortOrderEnum
  node_locale: SortOrderEnum
  parent: NodeSortInput
  services: SortOrderEnum
  slug: SortOrderEnum
  spaceId: SortOrderEnum
  sys: ContentfulOfferSysSortInput
  updatedAt: SortOrderEnum
}

input ContentfulOfferSysContentTypeFieldSelector {
  sys: ContentfulOfferSysContentTypeSysFieldSelector
}

input ContentfulOfferSysContentTypeFilterInput {
  sys: ContentfulOfferSysContentTypeSysFilterInput
}

input ContentfulOfferSysContentTypeSortInput {
  sys: ContentfulOfferSysContentTypeSysSortInput
}

input ContentfulOfferSysContentTypeSysFieldSelector {
  id: FieldSelectorEnum
  linkType: FieldSelectorEnum
  type: FieldSelectorEnum
}

input ContentfulOfferSysContentTypeSysFilterInput {
  id: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

input ContentfulOfferSysContentTypeSysSortInput {
  id: SortOrderEnum
  linkType: SortOrderEnum
  type: SortOrderEnum
}

input ContentfulOfferSysFieldSelector {
  contentType: ContentfulOfferSysContentTypeFieldSelector
  revision: FieldSelectorEnum
  type: FieldSelectorEnum
}

input ContentfulOfferSysFilterInput {
  contentType: ContentfulOfferSysContentTypeFilterInput
  revision: IntQueryOperatorInput
  type: StringQueryOperatorInput
}

input ContentfulOfferSysSortInput {
  contentType: ContentfulOfferSysContentTypeSortInput
  revision: SortOrderEnum
  type: SortOrderEnum
}

input ContentfulPageFieldSelector {
  children: NodeFieldSelector
  contentful_id: FieldSelectorEnum
  createdAt: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  node_locale: FieldSelectorEnum
  parent: NodeFieldSelector
  seo_description: FieldSelectorEnum
  seo_title: FieldSelectorEnum
  slug: FieldSelectorEnum
  spaceId: FieldSelectorEnum
  sys: ContentfulPageSysFieldSelector
  updatedAt: FieldSelectorEnum
}

input ContentfulPageFilterInput {
  children: NodeFilterListInput
  contentful_id: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  node_locale: StringQueryOperatorInput
  parent: NodeFilterInput
  seo_description: StringQueryOperatorInput
  seo_title: StringQueryOperatorInput
  slug: StringQueryOperatorInput
  spaceId: StringQueryOperatorInput
  sys: ContentfulPageSysFilterInput
  updatedAt: DateQueryOperatorInput
}

input ContentfulPageSortInput {
  children: NodeSortInput
  contentful_id: SortOrderEnum
  createdAt: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  node_locale: SortOrderEnum
  parent: NodeSortInput
  seo_description: SortOrderEnum
  seo_title: SortOrderEnum
  slug: SortOrderEnum
  spaceId: SortOrderEnum
  sys: ContentfulPageSysSortInput
  updatedAt: SortOrderEnum
}

input ContentfulPageSysContentTypeFieldSelector {
  sys: ContentfulPageSysContentTypeSysFieldSelector
}

input ContentfulPageSysContentTypeFilterInput {
  sys: ContentfulPageSysContentTypeSysFilterInput
}

input ContentfulPageSysContentTypeSortInput {
  sys: ContentfulPageSysContentTypeSysSortInput
}

input ContentfulPageSysContentTypeSysFieldSelector {
  id: FieldSelectorEnum
  linkType: FieldSelectorEnum
  type: FieldSelectorEnum
}

input ContentfulPageSysContentTypeSysFilterInput {
  id: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

input ContentfulPageSysContentTypeSysSortInput {
  id: SortOrderEnum
  linkType: SortOrderEnum
  type: SortOrderEnum
}

input ContentfulPageSysFieldSelector {
  contentType: ContentfulPageSysContentTypeFieldSelector
  revision: FieldSelectorEnum
  type: FieldSelectorEnum
}

input ContentfulPageSysFilterInput {
  contentType: ContentfulPageSysContentTypeFilterInput
  revision: IntQueryOperatorInput
  type: StringQueryOperatorInput
}

input ContentfulPageSysSortInput {
  contentType: ContentfulPageSysContentTypeSortInput
  revision: SortOrderEnum
  type: SortOrderEnum
}

input ContentfulRedirectFieldSelector {
  children: NodeFieldSelector
  contentful_id: FieldSelectorEnum
  createdAt: FieldSelectorEnum
  from: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  node_locale: FieldSelectorEnum
  parent: NodeFieldSelector
  spaceId: FieldSelectorEnum
  sys: ContentfulRedirectSysFieldSelector
  to: FieldSelectorEnum
  updatedAt: FieldSelectorEnum
}

input ContentfulRedirectFilterInput {
  children: NodeFilterListInput
  contentful_id: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  from: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  node_locale: StringQueryOperatorInput
  parent: NodeFilterInput
  spaceId: StringQueryOperatorInput
  sys: ContentfulRedirectSysFilterInput
  to: StringQueryOperatorInput
  updatedAt: DateQueryOperatorInput
}

input ContentfulRedirectSortInput {
  children: NodeSortInput
  contentful_id: SortOrderEnum
  createdAt: SortOrderEnum
  from: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  node_locale: SortOrderEnum
  parent: NodeSortInput
  spaceId: SortOrderEnum
  sys: ContentfulRedirectSysSortInput
  to: SortOrderEnum
  updatedAt: SortOrderEnum
}

input ContentfulRedirectSysContentTypeFieldSelector {
  sys: ContentfulRedirectSysContentTypeSysFieldSelector
}

input ContentfulRedirectSysContentTypeFilterInput {
  sys: ContentfulRedirectSysContentTypeSysFilterInput
}

input ContentfulRedirectSysContentTypeSortInput {
  sys: ContentfulRedirectSysContentTypeSysSortInput
}

input ContentfulRedirectSysContentTypeSysFieldSelector {
  id: FieldSelectorEnum
  linkType: FieldSelectorEnum
  type: FieldSelectorEnum
}

input ContentfulRedirectSysContentTypeSysFilterInput {
  id: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

input ContentfulRedirectSysContentTypeSysSortInput {
  id: SortOrderEnum
  linkType: SortOrderEnum
  type: SortOrderEnum
}

input ContentfulRedirectSysFieldSelector {
  contentType: ContentfulRedirectSysContentTypeFieldSelector
  revision: FieldSelectorEnum
  type: FieldSelectorEnum
}

input ContentfulRedirectSysFilterInput {
  contentType: ContentfulRedirectSysContentTypeFilterInput
  revision: IntQueryOperatorInput
  type: StringQueryOperatorInput
}

input ContentfulRedirectSysSortInput {
  contentType: ContentfulRedirectSysContentTypeSortInput
  revision: SortOrderEnum
  type: SortOrderEnum
}

input ContentfulServiceContentFieldSelector {
  raw: FieldSelectorEnum
}

input ContentfulServiceContentFilterInput {
  raw: StringQueryOperatorInput
}

input ContentfulServiceContentSortInput {
  raw: SortOrderEnum
}

input ContentfulServiceFieldSelector {
  children: NodeFieldSelector
  content: ContentfulServiceContentFieldSelector
  contentful_id: FieldSelectorEnum
  cover: ContentfulAssetFieldSelector
  createdAt: FieldSelectorEnum
  description: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  name: FieldSelectorEnum
  node_locale: FieldSelectorEnum
  parent: NodeFieldSelector
  services: FieldSelectorEnum
  slug: FieldSelectorEnum
  spaceId: FieldSelectorEnum
  sys: ContentfulServiceSysFieldSelector
  updatedAt: FieldSelectorEnum
}

input ContentfulServiceFilterInput {
  children: NodeFilterListInput
  content: ContentfulServiceContentFilterInput
  contentful_id: StringQueryOperatorInput
  cover: ContentfulAssetFilterInput
  createdAt: DateQueryOperatorInput
  description: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  name: StringQueryOperatorInput
  node_locale: StringQueryOperatorInput
  parent: NodeFilterInput
  services: StringQueryOperatorInput
  slug: StringQueryOperatorInput
  spaceId: StringQueryOperatorInput
  sys: ContentfulServiceSysFilterInput
  updatedAt: DateQueryOperatorInput
}

input ContentfulServiceSortInput {
  children: NodeSortInput
  content: ContentfulServiceContentSortInput
  contentful_id: SortOrderEnum
  cover: ContentfulAssetSortInput
  createdAt: SortOrderEnum
  description: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  name: SortOrderEnum
  node_locale: SortOrderEnum
  parent: NodeSortInput
  services: SortOrderEnum
  slug: SortOrderEnum
  spaceId: SortOrderEnum
  sys: ContentfulServiceSysSortInput
  updatedAt: SortOrderEnum
}

input ContentfulServiceSysContentTypeFieldSelector {
  sys: ContentfulServiceSysContentTypeSysFieldSelector
}

input ContentfulServiceSysContentTypeFilterInput {
  sys: ContentfulServiceSysContentTypeSysFilterInput
}

input ContentfulServiceSysContentTypeSortInput {
  sys: ContentfulServiceSysContentTypeSysSortInput
}

input ContentfulServiceSysContentTypeSysFieldSelector {
  id: FieldSelectorEnum
  linkType: FieldSelectorEnum
  type: FieldSelectorEnum
}

input ContentfulServiceSysContentTypeSysFilterInput {
  id: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

input ContentfulServiceSysContentTypeSysSortInput {
  id: SortOrderEnum
  linkType: SortOrderEnum
  type: SortOrderEnum
}

input ContentfulServiceSysFieldSelector {
  contentType: ContentfulServiceSysContentTypeFieldSelector
  revision: FieldSelectorEnum
  type: FieldSelectorEnum
}

input ContentfulServiceSysFilterInput {
  contentType: ContentfulServiceSysContentTypeFilterInput
  revision: IntQueryOperatorInput
  type: StringQueryOperatorInput
}

input ContentfulServiceSysSortInput {
  contentType: ContentfulServiceSysContentTypeSortInput
  revision: SortOrderEnum
  type: SortOrderEnum
}

input ContentfulServicesCpFieldSelector {
  childContentfulServicesCpContentJsonNode: contentfulServicesCpContentJsonNodeFieldSelector
  children: NodeFieldSelector
  childrenContentfulServicesCpContentJsonNode: contentfulServicesCpContentJsonNodeFieldSelector
  content: contentfulServicesCpContentJsonNodeFieldSelector
  contentful_id: FieldSelectorEnum
  createdAt: FieldSelectorEnum
  id: FieldSelectorEnum
  image: ContentfulAssetFieldSelector
  internal: InternalFieldSelector
  name: FieldSelectorEnum
  node_locale: FieldSelectorEnum
  order: FieldSelectorEnum
  parent: NodeFieldSelector
  slug: FieldSelectorEnum
  spaceId: FieldSelectorEnum
  sys: ContentfulServicesCpSysFieldSelector
  updatedAt: FieldSelectorEnum
}

input ContentfulServicesCpFilterInput {
  childContentfulServicesCpContentJsonNode: contentfulServicesCpContentJsonNodeFilterInput
  children: NodeFilterListInput
  childrenContentfulServicesCpContentJsonNode: contentfulServicesCpContentJsonNodeFilterListInput
  content: contentfulServicesCpContentJsonNodeFilterListInput
  contentful_id: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  id: StringQueryOperatorInput
  image: ContentfulAssetFilterInput
  internal: InternalFilterInput
  name: StringQueryOperatorInput
  node_locale: StringQueryOperatorInput
  order: IntQueryOperatorInput
  parent: NodeFilterInput
  slug: StringQueryOperatorInput
  spaceId: StringQueryOperatorInput
  sys: ContentfulServicesCpSysFilterInput
  updatedAt: DateQueryOperatorInput
}

input ContentfulServicesCpSortInput {
  childContentfulServicesCpContentJsonNode: contentfulServicesCpContentJsonNodeSortInput
  children: NodeSortInput
  childrenContentfulServicesCpContentJsonNode: contentfulServicesCpContentJsonNodeSortInput
  content: contentfulServicesCpContentJsonNodeSortInput
  contentful_id: SortOrderEnum
  createdAt: SortOrderEnum
  id: SortOrderEnum
  image: ContentfulAssetSortInput
  internal: InternalSortInput
  name: SortOrderEnum
  node_locale: SortOrderEnum
  order: SortOrderEnum
  parent: NodeSortInput
  slug: SortOrderEnum
  spaceId: SortOrderEnum
  sys: ContentfulServicesCpSysSortInput
  updatedAt: SortOrderEnum
}

input ContentfulServicesCpSysContentTypeFieldSelector {
  sys: ContentfulServicesCpSysContentTypeSysFieldSelector
}

input ContentfulServicesCpSysContentTypeFilterInput {
  sys: ContentfulServicesCpSysContentTypeSysFilterInput
}

input ContentfulServicesCpSysContentTypeSortInput {
  sys: ContentfulServicesCpSysContentTypeSysSortInput
}

input ContentfulServicesCpSysContentTypeSysFieldSelector {
  id: FieldSelectorEnum
  linkType: FieldSelectorEnum
  type: FieldSelectorEnum
}

input ContentfulServicesCpSysContentTypeSysFilterInput {
  id: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

input ContentfulServicesCpSysContentTypeSysSortInput {
  id: SortOrderEnum
  linkType: SortOrderEnum
  type: SortOrderEnum
}

input ContentfulServicesCpSysFieldSelector {
  contentType: ContentfulServicesCpSysContentTypeFieldSelector
  revision: FieldSelectorEnum
  type: FieldSelectorEnum
}

input ContentfulServicesCpSysFilterInput {
  contentType: ContentfulServicesCpSysContentTypeFilterInput
  revision: IntQueryOperatorInput
  type: StringQueryOperatorInput
}

input ContentfulServicesCpSysSortInput {
  contentType: ContentfulServicesCpSysContentTypeSortInput
  revision: SortOrderEnum
  type: SortOrderEnum
}

input ContentfulServicesFieldSelector {
  children: NodeFieldSelector
  contentful_id: FieldSelectorEnum
  createdAt: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  name: FieldSelectorEnum
  node_locale: FieldSelectorEnum
  order: FieldSelectorEnum
  parent: NodeFieldSelector
  slug: FieldSelectorEnum
  spaceId: FieldSelectorEnum
  sys: ContentfulServicesSysFieldSelector
  text: ContentfulServicesTextFieldSelector
  title: FieldSelectorEnum
  updatedAt: FieldSelectorEnum
}

input ContentfulServicesFilterInput {
  children: NodeFilterListInput
  contentful_id: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  name: StringQueryOperatorInput
  node_locale: StringQueryOperatorInput
  order: IntQueryOperatorInput
  parent: NodeFilterInput
  slug: StringQueryOperatorInput
  spaceId: StringQueryOperatorInput
  sys: ContentfulServicesSysFilterInput
  text: ContentfulServicesTextFilterInput
  title: StringQueryOperatorInput
  updatedAt: DateQueryOperatorInput
}

input ContentfulServicesSortInput {
  children: NodeSortInput
  contentful_id: SortOrderEnum
  createdAt: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  name: SortOrderEnum
  node_locale: SortOrderEnum
  order: SortOrderEnum
  parent: NodeSortInput
  slug: SortOrderEnum
  spaceId: SortOrderEnum
  sys: ContentfulServicesSysSortInput
  text: ContentfulServicesTextSortInput
  title: SortOrderEnum
  updatedAt: SortOrderEnum
}

input ContentfulServicesSysContentTypeFieldSelector {
  sys: ContentfulServicesSysContentTypeSysFieldSelector
}

input ContentfulServicesSysContentTypeFilterInput {
  sys: ContentfulServicesSysContentTypeSysFilterInput
}

input ContentfulServicesSysContentTypeSortInput {
  sys: ContentfulServicesSysContentTypeSysSortInput
}

input ContentfulServicesSysContentTypeSysFieldSelector {
  id: FieldSelectorEnum
  linkType: FieldSelectorEnum
  type: FieldSelectorEnum
}

input ContentfulServicesSysContentTypeSysFilterInput {
  id: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

input ContentfulServicesSysContentTypeSysSortInput {
  id: SortOrderEnum
  linkType: SortOrderEnum
  type: SortOrderEnum
}

input ContentfulServicesSysFieldSelector {
  contentType: ContentfulServicesSysContentTypeFieldSelector
  revision: FieldSelectorEnum
  type: FieldSelectorEnum
}

input ContentfulServicesSysFilterInput {
  contentType: ContentfulServicesSysContentTypeFilterInput
  revision: IntQueryOperatorInput
  type: StringQueryOperatorInput
}

input ContentfulServicesSysSortInput {
  contentType: ContentfulServicesSysContentTypeSortInput
  revision: SortOrderEnum
  type: SortOrderEnum
}

input ContentfulServicesTextFieldSelector {
  raw: FieldSelectorEnum
}

input ContentfulServicesTextFilterInput {
  raw: StringQueryOperatorInput
}

input ContentfulServicesTextSortInput {
  raw: SortOrderEnum
}

input ContentfulSignatureFieldSelector {
  children: NodeFieldSelector
  contentful_id: FieldSelectorEnum
  createdAt: FieldSelectorEnum
  firstName: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  lastName: FieldSelectorEnum
  legal: FieldSelectorEnum
  node_locale: FieldSelectorEnum
  parent: NodeFieldSelector
  spaceId: FieldSelectorEnum
  sys: ContentfulSignatureSysFieldSelector
  title: FieldSelectorEnum
  updatedAt: FieldSelectorEnum
}

input ContentfulSignatureFilterInput {
  children: NodeFilterListInput
  contentful_id: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  firstName: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lastName: StringQueryOperatorInput
  legal: BooleanQueryOperatorInput
  node_locale: StringQueryOperatorInput
  parent: NodeFilterInput
  spaceId: StringQueryOperatorInput
  sys: ContentfulSignatureSysFilterInput
  title: StringQueryOperatorInput
  updatedAt: DateQueryOperatorInput
}

input ContentfulSignatureLogoFieldSelector {
  children: NodeFieldSelector
  contentful_id: FieldSelectorEnum
  createdAt: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  logo: ContentfulAssetFieldSelector
  name: FieldSelectorEnum
  node_locale: FieldSelectorEnum
  parent: NodeFieldSelector
  spaceId: FieldSelectorEnum
  sys: ContentfulSignatureLogoSysFieldSelector
  updatedAt: FieldSelectorEnum
}

input ContentfulSignatureLogoFilterInput {
  children: NodeFilterListInput
  contentful_id: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  logo: ContentfulAssetFilterInput
  name: StringQueryOperatorInput
  node_locale: StringQueryOperatorInput
  parent: NodeFilterInput
  spaceId: StringQueryOperatorInput
  sys: ContentfulSignatureLogoSysFilterInput
  updatedAt: DateQueryOperatorInput
}

input ContentfulSignatureLogoSortInput {
  children: NodeSortInput
  contentful_id: SortOrderEnum
  createdAt: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  logo: ContentfulAssetSortInput
  name: SortOrderEnum
  node_locale: SortOrderEnum
  parent: NodeSortInput
  spaceId: SortOrderEnum
  sys: ContentfulSignatureLogoSysSortInput
  updatedAt: SortOrderEnum
}

input ContentfulSignatureLogoSysContentTypeFieldSelector {
  sys: ContentfulSignatureLogoSysContentTypeSysFieldSelector
}

input ContentfulSignatureLogoSysContentTypeFilterInput {
  sys: ContentfulSignatureLogoSysContentTypeSysFilterInput
}

input ContentfulSignatureLogoSysContentTypeSortInput {
  sys: ContentfulSignatureLogoSysContentTypeSysSortInput
}

input ContentfulSignatureLogoSysContentTypeSysFieldSelector {
  id: FieldSelectorEnum
  linkType: FieldSelectorEnum
  type: FieldSelectorEnum
}

input ContentfulSignatureLogoSysContentTypeSysFilterInput {
  id: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

input ContentfulSignatureLogoSysContentTypeSysSortInput {
  id: SortOrderEnum
  linkType: SortOrderEnum
  type: SortOrderEnum
}

input ContentfulSignatureLogoSysFieldSelector {
  contentType: ContentfulSignatureLogoSysContentTypeFieldSelector
  revision: FieldSelectorEnum
  type: FieldSelectorEnum
}

input ContentfulSignatureLogoSysFilterInput {
  contentType: ContentfulSignatureLogoSysContentTypeFilterInput
  revision: IntQueryOperatorInput
  type: StringQueryOperatorInput
}

input ContentfulSignatureLogoSysSortInput {
  contentType: ContentfulSignatureLogoSysContentTypeSortInput
  revision: SortOrderEnum
  type: SortOrderEnum
}

input ContentfulSignatureSortInput {
  children: NodeSortInput
  contentful_id: SortOrderEnum
  createdAt: SortOrderEnum
  firstName: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  lastName: SortOrderEnum
  legal: SortOrderEnum
  node_locale: SortOrderEnum
  parent: NodeSortInput
  spaceId: SortOrderEnum
  sys: ContentfulSignatureSysSortInput
  title: SortOrderEnum
  updatedAt: SortOrderEnum
}

input ContentfulSignatureSysContentTypeFieldSelector {
  sys: ContentfulSignatureSysContentTypeSysFieldSelector
}

input ContentfulSignatureSysContentTypeFilterInput {
  sys: ContentfulSignatureSysContentTypeSysFilterInput
}

input ContentfulSignatureSysContentTypeSortInput {
  sys: ContentfulSignatureSysContentTypeSysSortInput
}

input ContentfulSignatureSysContentTypeSysFieldSelector {
  id: FieldSelectorEnum
  linkType: FieldSelectorEnum
  type: FieldSelectorEnum
}

input ContentfulSignatureSysContentTypeSysFilterInput {
  id: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

input ContentfulSignatureSysContentTypeSysSortInput {
  id: SortOrderEnum
  linkType: SortOrderEnum
  type: SortOrderEnum
}

input ContentfulSignatureSysFieldSelector {
  contentType: ContentfulSignatureSysContentTypeFieldSelector
  revision: FieldSelectorEnum
  type: FieldSelectorEnum
}

input ContentfulSignatureSysFilterInput {
  contentType: ContentfulSignatureSysContentTypeFilterInput
  revision: IntQueryOperatorInput
  type: StringQueryOperatorInput
}

input ContentfulSignatureSysSortInput {
  contentType: ContentfulSignatureSysContentTypeSortInput
  revision: SortOrderEnum
  type: SortOrderEnum
}

input DateQueryOperatorInput {
  eq: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nin: [Date]
}

input DirectoryFieldSelector {
  absolutePath: FieldSelectorEnum
  accessTime: FieldSelectorEnum
  atime: FieldSelectorEnum
  atimeMs: FieldSelectorEnum
  base: FieldSelectorEnum
  birthTime: FieldSelectorEnum
  birthtime: FieldSelectorEnum
  birthtimeMs: FieldSelectorEnum
  changeTime: FieldSelectorEnum
  children: NodeFieldSelector
  ctime: FieldSelectorEnum
  ctimeMs: FieldSelectorEnum
  dev: FieldSelectorEnum
  dir: FieldSelectorEnum
  ext: FieldSelectorEnum
  extension: FieldSelectorEnum
  gid: FieldSelectorEnum
  id: FieldSelectorEnum
  ino: FieldSelectorEnum
  internal: InternalFieldSelector
  mode: FieldSelectorEnum
  modifiedTime: FieldSelectorEnum
  mtime: FieldSelectorEnum
  mtimeMs: FieldSelectorEnum
  name: FieldSelectorEnum
  nlink: FieldSelectorEnum
  parent: NodeFieldSelector
  prettySize: FieldSelectorEnum
  rdev: FieldSelectorEnum
  relativeDirectory: FieldSelectorEnum
  relativePath: FieldSelectorEnum
  root: FieldSelectorEnum
  size: FieldSelectorEnum
  sourceInstanceName: FieldSelectorEnum
  uid: FieldSelectorEnum
}

input DirectoryFilterInput {
  absolutePath: StringQueryOperatorInput
  accessTime: DateQueryOperatorInput
  atime: DateQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  base: StringQueryOperatorInput
  birthTime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  changeTime: DateQueryOperatorInput
  children: NodeFilterListInput
  ctime: DateQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  dev: IntQueryOperatorInput
  dir: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  gid: IntQueryOperatorInput
  id: StringQueryOperatorInput
  ino: FloatQueryOperatorInput
  internal: InternalFilterInput
  mode: IntQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  name: StringQueryOperatorInput
  nlink: IntQueryOperatorInput
  parent: NodeFilterInput
  prettySize: StringQueryOperatorInput
  rdev: IntQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  root: StringQueryOperatorInput
  size: IntQueryOperatorInput
  sourceInstanceName: StringQueryOperatorInput
  uid: IntQueryOperatorInput
}

input DirectorySortInput {
  absolutePath: SortOrderEnum
  accessTime: SortOrderEnum
  atime: SortOrderEnum
  atimeMs: SortOrderEnum
  base: SortOrderEnum
  birthTime: SortOrderEnum
  birthtime: SortOrderEnum
  birthtimeMs: SortOrderEnum
  changeTime: SortOrderEnum
  children: NodeSortInput
  ctime: SortOrderEnum
  ctimeMs: SortOrderEnum
  dev: SortOrderEnum
  dir: SortOrderEnum
  ext: SortOrderEnum
  extension: SortOrderEnum
  gid: SortOrderEnum
  id: SortOrderEnum
  ino: SortOrderEnum
  internal: InternalSortInput
  mode: SortOrderEnum
  modifiedTime: SortOrderEnum
  mtime: SortOrderEnum
  mtimeMs: SortOrderEnum
  name: SortOrderEnum
  nlink: SortOrderEnum
  parent: NodeSortInput
  prettySize: SortOrderEnum
  rdev: SortOrderEnum
  relativeDirectory: SortOrderEnum
  relativePath: SortOrderEnum
  root: SortOrderEnum
  size: SortOrderEnum
  sourceInstanceName: SortOrderEnum
  uid: SortOrderEnum
}

input DuotoneGradient {
  highlight: String!
  opacity: Int
  shadow: String!
}

input FileFieldSelector {
  absolutePath: FieldSelectorEnum
  accessTime: FieldSelectorEnum
  atime: FieldSelectorEnum
  atimeMs: FieldSelectorEnum
  base: FieldSelectorEnum
  birthTime: FieldSelectorEnum
  birthtime: FieldSelectorEnum
  birthtimeMs: FieldSelectorEnum
  blksize: FieldSelectorEnum
  blocks: FieldSelectorEnum
  changeTime: FieldSelectorEnum
  childImageSharp: ImageSharpFieldSelector
  children: NodeFieldSelector
  childrenImageSharp: ImageSharpFieldSelector
  ctime: FieldSelectorEnum
  ctimeMs: FieldSelectorEnum
  dev: FieldSelectorEnum
  dir: FieldSelectorEnum
  ext: FieldSelectorEnum
  extension: FieldSelectorEnum
  gid: FieldSelectorEnum
  id: FieldSelectorEnum
  ino: FieldSelectorEnum
  internal: InternalFieldSelector
  mode: FieldSelectorEnum
  modifiedTime: FieldSelectorEnum
  mtime: FieldSelectorEnum
  mtimeMs: FieldSelectorEnum
  name: FieldSelectorEnum
  nlink: FieldSelectorEnum
  parent: NodeFieldSelector
  prettySize: FieldSelectorEnum
  publicURL: FieldSelectorEnum
  rdev: FieldSelectorEnum
  relativeDirectory: FieldSelectorEnum
  relativePath: FieldSelectorEnum
  root: FieldSelectorEnum
  size: FieldSelectorEnum
  sourceInstanceName: FieldSelectorEnum
  uid: FieldSelectorEnum
}

input FileFilterInput {
  absolutePath: StringQueryOperatorInput
  accessTime: DateQueryOperatorInput
  atime: DateQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  base: StringQueryOperatorInput
  birthTime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  blksize: IntQueryOperatorInput
  blocks: IntQueryOperatorInput
  changeTime: DateQueryOperatorInput
  childImageSharp: ImageSharpFilterInput
  children: NodeFilterListInput
  childrenImageSharp: ImageSharpFilterListInput
  ctime: DateQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  dev: IntQueryOperatorInput
  dir: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  gid: IntQueryOperatorInput
  id: StringQueryOperatorInput
  ino: FloatQueryOperatorInput
  internal: InternalFilterInput
  mode: IntQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  name: StringQueryOperatorInput
  nlink: IntQueryOperatorInput
  parent: NodeFilterInput
  prettySize: StringQueryOperatorInput
  publicURL: StringQueryOperatorInput
  rdev: IntQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  root: StringQueryOperatorInput
  size: IntQueryOperatorInput
  sourceInstanceName: StringQueryOperatorInput
  uid: IntQueryOperatorInput
}

input FileSortInput {
  absolutePath: SortOrderEnum
  accessTime: SortOrderEnum
  atime: SortOrderEnum
  atimeMs: SortOrderEnum
  base: SortOrderEnum
  birthTime: SortOrderEnum
  birthtime: SortOrderEnum
  birthtimeMs: SortOrderEnum
  blksize: SortOrderEnum
  blocks: SortOrderEnum
  changeTime: SortOrderEnum
  childImageSharp: ImageSharpSortInput
  children: NodeSortInput
  childrenImageSharp: ImageSharpSortInput
  ctime: SortOrderEnum
  ctimeMs: SortOrderEnum
  dev: SortOrderEnum
  dir: SortOrderEnum
  ext: SortOrderEnum
  extension: SortOrderEnum
  gid: SortOrderEnum
  id: SortOrderEnum
  ino: SortOrderEnum
  internal: InternalSortInput
  mode: SortOrderEnum
  modifiedTime: SortOrderEnum
  mtime: SortOrderEnum
  mtimeMs: SortOrderEnum
  name: SortOrderEnum
  nlink: SortOrderEnum
  parent: NodeSortInput
  prettySize: SortOrderEnum
  publicURL: SortOrderEnum
  rdev: SortOrderEnum
  relativeDirectory: SortOrderEnum
  relativePath: SortOrderEnum
  root: SortOrderEnum
  size: SortOrderEnum
  sourceInstanceName: SortOrderEnum
  uid: SortOrderEnum
}

input FloatQueryOperatorInput {
  eq: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  nin: [Float]
}

input GatsbyImageDataQueryOperatorInput {
  eq: GatsbyImageData
  in: [GatsbyImageData]
  ne: GatsbyImageData
  nin: [GatsbyImageData]
}

input ImageSharpFieldSelector {
  children: NodeFieldSelector
  fixed: ImageSharpFixedFieldSelector
  fluid: ImageSharpFluidFieldSelector
  gatsbyImageData: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  original: ImageSharpOriginalFieldSelector
  parent: NodeFieldSelector
  resize: ImageSharpResizeFieldSelector
}

input ImageSharpFilterInput {
  children: NodeFilterListInput
  fixed: ImageSharpFixedFilterInput
  fluid: ImageSharpFluidFilterInput
  gatsbyImageData: GatsbyImageDataQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  original: ImageSharpOriginalFilterInput
  parent: NodeFilterInput
  resize: ImageSharpResizeFilterInput
}

input ImageSharpFilterListInput {
  elemMatch: ImageSharpFilterInput
}

input ImageSharpFixedFieldSelector {
  aspectRatio: FieldSelectorEnum
  base64: FieldSelectorEnum
  height: FieldSelectorEnum
  originalName: FieldSelectorEnum
  src: FieldSelectorEnum
  srcSet: FieldSelectorEnum
  srcSetWebp: FieldSelectorEnum
  srcWebp: FieldSelectorEnum
  tracedSVG: FieldSelectorEnum
  width: FieldSelectorEnum
}

input ImageSharpFixedFilterInput {
  aspectRatio: FloatQueryOperatorInput
  base64: StringQueryOperatorInput
  height: FloatQueryOperatorInput
  originalName: StringQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  width: FloatQueryOperatorInput
}

input ImageSharpFixedSortInput {
  aspectRatio: SortOrderEnum
  base64: SortOrderEnum
  height: SortOrderEnum
  originalName: SortOrderEnum
  src: SortOrderEnum
  srcSet: SortOrderEnum
  srcSetWebp: SortOrderEnum
  srcWebp: SortOrderEnum
  tracedSVG: SortOrderEnum
  width: SortOrderEnum
}

input ImageSharpFluidFieldSelector {
  aspectRatio: FieldSelectorEnum
  base64: FieldSelectorEnum
  originalImg: FieldSelectorEnum
  originalName: FieldSelectorEnum
  presentationHeight: FieldSelectorEnum
  presentationWidth: FieldSelectorEnum
  sizes: FieldSelectorEnum
  src: FieldSelectorEnum
  srcSet: FieldSelectorEnum
  srcSetWebp: FieldSelectorEnum
  srcWebp: FieldSelectorEnum
  tracedSVG: FieldSelectorEnum
}

input ImageSharpFluidFilterInput {
  aspectRatio: FloatQueryOperatorInput
  base64: StringQueryOperatorInput
  originalImg: StringQueryOperatorInput
  originalName: StringQueryOperatorInput
  presentationHeight: IntQueryOperatorInput
  presentationWidth: IntQueryOperatorInput
  sizes: StringQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
}

input ImageSharpFluidSortInput {
  aspectRatio: SortOrderEnum
  base64: SortOrderEnum
  originalImg: SortOrderEnum
  originalName: SortOrderEnum
  presentationHeight: SortOrderEnum
  presentationWidth: SortOrderEnum
  sizes: SortOrderEnum
  src: SortOrderEnum
  srcSet: SortOrderEnum
  srcSetWebp: SortOrderEnum
  srcWebp: SortOrderEnum
  tracedSVG: SortOrderEnum
}

input ImageSharpOriginalFieldSelector {
  height: FieldSelectorEnum
  src: FieldSelectorEnum
  width: FieldSelectorEnum
}

input ImageSharpOriginalFilterInput {
  height: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  width: FloatQueryOperatorInput
}

input ImageSharpOriginalSortInput {
  height: SortOrderEnum
  src: SortOrderEnum
  width: SortOrderEnum
}

input ImageSharpResizeFieldSelector {
  aspectRatio: FieldSelectorEnum
  height: FieldSelectorEnum
  originalName: FieldSelectorEnum
  src: FieldSelectorEnum
  tracedSVG: FieldSelectorEnum
  width: FieldSelectorEnum
}

input ImageSharpResizeFilterInput {
  aspectRatio: FloatQueryOperatorInput
  height: IntQueryOperatorInput
  originalName: StringQueryOperatorInput
  src: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  width: IntQueryOperatorInput
}

input ImageSharpResizeSortInput {
  aspectRatio: SortOrderEnum
  height: SortOrderEnum
  originalName: SortOrderEnum
  src: SortOrderEnum
  tracedSVG: SortOrderEnum
  width: SortOrderEnum
}

input ImageSharpSortInput {
  children: NodeSortInput
  fixed: ImageSharpFixedSortInput
  fluid: ImageSharpFluidSortInput
  gatsbyImageData: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  original: ImageSharpOriginalSortInput
  parent: NodeSortInput
  resize: ImageSharpResizeSortInput
}

input IntQueryOperatorInput {
  eq: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  nin: [Int]
}

input InternalFieldSelector {
  content: FieldSelectorEnum
  contentDigest: FieldSelectorEnum
  contentFilePath: FieldSelectorEnum
  description: FieldSelectorEnum
  fieldOwners: FieldSelectorEnum
  ignoreType: FieldSelectorEnum
  mediaType: FieldSelectorEnum
  owner: FieldSelectorEnum
  type: FieldSelectorEnum
}

input InternalFilterInput {
  content: StringQueryOperatorInput
  contentDigest: StringQueryOperatorInput
  contentFilePath: StringQueryOperatorInput
  description: StringQueryOperatorInput
  fieldOwners: StringQueryOperatorInput
  ignoreType: BooleanQueryOperatorInput
  mediaType: StringQueryOperatorInput
  owner: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

input InternalSortInput {
  content: SortOrderEnum
  contentDigest: SortOrderEnum
  contentFilePath: SortOrderEnum
  description: SortOrderEnum
  fieldOwners: SortOrderEnum
  ignoreType: SortOrderEnum
  mediaType: SortOrderEnum
  owner: SortOrderEnum
  type: SortOrderEnum
}

input JPGOptions {
  progressive: Boolean = true
  quality: Int
}

input JSONQueryOperatorInput {
  eq: JSON
  glob: JSON
  in: [JSON]
  ne: JSON
  nin: [JSON]
  regex: JSON
}

input NodeFieldSelector {
  children: NodeFieldSelector
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  parent: NodeFieldSelector
}

input NodeFilterInput {
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  parent: NodeFilterInput
}

input NodeFilterListInput {
  elemMatch: NodeFilterInput
}

input NodeSortInput {
  children: NodeSortInput
  id: SortOrderEnum
  internal: InternalSortInput
  parent: NodeSortInput
}

input PNGOptions {
  compressionSpeed: Int = 4
  quality: Int
}

input Potrace {
  alphaMax: Float
  background: String
  blackOnWhite: Boolean
  color: String
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  turdSize: Float
  turnPolicy: PotraceTurnPolicy
}

input RemoteFileResizeFieldSelector {
  height: FieldSelectorEnum
  src: FieldSelectorEnum
  width: FieldSelectorEnum
}

input RemoteFileResizeFilterInput {
  height: IntQueryOperatorInput
  src: StringQueryOperatorInput
  width: IntQueryOperatorInput
}

input RemoteFileResizeSortInput {
  height: SortOrderEnum
  src: SortOrderEnum
  width: SortOrderEnum
}

input SiteBuildMetadataFieldSelector {
  buildTime: FieldSelectorEnum
  children: NodeFieldSelector
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  parent: NodeFieldSelector
}

input SiteBuildMetadataFilterInput {
  buildTime: DateQueryOperatorInput
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  parent: NodeFilterInput
}

input SiteBuildMetadataSortInput {
  buildTime: SortOrderEnum
  children: NodeSortInput
  id: SortOrderEnum
  internal: InternalSortInput
  parent: NodeSortInput
}

input SiteFieldSelector {
  buildTime: FieldSelectorEnum
  children: NodeFieldSelector
  graphqlTypegen: FieldSelectorEnum
  host: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  jsxRuntime: FieldSelectorEnum
  parent: NodeFieldSelector
  pathPrefix: FieldSelectorEnum
  polyfill: FieldSelectorEnum
  port: FieldSelectorEnum
  siteMetadata: SiteSiteMetadataFieldSelector
  trailingSlash: FieldSelectorEnum
}

input SiteFilterInput {
  buildTime: DateQueryOperatorInput
  children: NodeFilterListInput
  graphqlTypegen: BooleanQueryOperatorInput
  host: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  jsxRuntime: StringQueryOperatorInput
  parent: NodeFilterInput
  pathPrefix: StringQueryOperatorInput
  polyfill: BooleanQueryOperatorInput
  port: IntQueryOperatorInput
  siteMetadata: SiteSiteMetadataFilterInput
  trailingSlash: StringQueryOperatorInput
}

input SiteFunctionFieldSelector {
  absoluteCompiledFilePath: FieldSelectorEnum
  children: NodeFieldSelector
  functionRoute: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  matchPath: FieldSelectorEnum
  originalAbsoluteFilePath: FieldSelectorEnum
  originalRelativeFilePath: FieldSelectorEnum
  parent: NodeFieldSelector
  pluginName: FieldSelectorEnum
  relativeCompiledFilePath: FieldSelectorEnum
}

input SiteFunctionFilterInput {
  absoluteCompiledFilePath: StringQueryOperatorInput
  children: NodeFilterListInput
  functionRoute: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  matchPath: StringQueryOperatorInput
  originalAbsoluteFilePath: StringQueryOperatorInput
  originalRelativeFilePath: StringQueryOperatorInput
  parent: NodeFilterInput
  pluginName: StringQueryOperatorInput
  relativeCompiledFilePath: StringQueryOperatorInput
}

input SiteFunctionSortInput {
  absoluteCompiledFilePath: SortOrderEnum
  children: NodeSortInput
  functionRoute: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  matchPath: SortOrderEnum
  originalAbsoluteFilePath: SortOrderEnum
  originalRelativeFilePath: SortOrderEnum
  parent: NodeSortInput
  pluginName: SortOrderEnum
  relativeCompiledFilePath: SortOrderEnum
}

input SitePageFieldSelector {
  children: NodeFieldSelector
  component: FieldSelectorEnum
  componentChunkName: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  internalComponentName: FieldSelectorEnum
  matchPath: FieldSelectorEnum
  pageContext: FieldSelectorEnum
  parent: NodeFieldSelector
  path: FieldSelectorEnum
  pluginCreator: SitePluginFieldSelector
}

input SitePageFilterInput {
  children: NodeFilterListInput
  component: StringQueryOperatorInput
  componentChunkName: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  internalComponentName: StringQueryOperatorInput
  matchPath: StringQueryOperatorInput
  pageContext: JSONQueryOperatorInput
  parent: NodeFilterInput
  path: StringQueryOperatorInput
  pluginCreator: SitePluginFilterInput
}

input SitePageSortInput {
  children: NodeSortInput
  component: SortOrderEnum
  componentChunkName: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  internalComponentName: SortOrderEnum
  matchPath: SortOrderEnum
  pageContext: SortOrderEnum
  parent: NodeSortInput
  path: SortOrderEnum
  pluginCreator: SitePluginSortInput
}

input SitePluginFieldSelector {
  browserAPIs: FieldSelectorEnum
  children: NodeFieldSelector
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  name: FieldSelectorEnum
  nodeAPIs: FieldSelectorEnum
  packageJson: FieldSelectorEnum
  parent: NodeFieldSelector
  pluginFilepath: FieldSelectorEnum
  pluginOptions: FieldSelectorEnum
  resolve: FieldSelectorEnum
  ssrAPIs: FieldSelectorEnum
  version: FieldSelectorEnum
}

input SitePluginFilterInput {
  browserAPIs: StringQueryOperatorInput
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  name: StringQueryOperatorInput
  nodeAPIs: StringQueryOperatorInput
  packageJson: JSONQueryOperatorInput
  parent: NodeFilterInput
  pluginFilepath: StringQueryOperatorInput
  pluginOptions: JSONQueryOperatorInput
  resolve: StringQueryOperatorInput
  ssrAPIs: StringQueryOperatorInput
  version: StringQueryOperatorInput
}

input SitePluginSortInput {
  browserAPIs: SortOrderEnum
  children: NodeSortInput
  id: SortOrderEnum
  internal: InternalSortInput
  name: SortOrderEnum
  nodeAPIs: SortOrderEnum
  packageJson: SortOrderEnum
  parent: NodeSortInput
  pluginFilepath: SortOrderEnum
  pluginOptions: SortOrderEnum
  resolve: SortOrderEnum
  ssrAPIs: SortOrderEnum
  version: SortOrderEnum
}

input SiteSiteMetadataFieldSelector {
  author: FieldSelectorEnum
  description: FieldSelectorEnum
  siteUrl: FieldSelectorEnum
  title: FieldSelectorEnum
}

input SiteSiteMetadataFilterInput {
  author: StringQueryOperatorInput
  description: StringQueryOperatorInput
  siteUrl: StringQueryOperatorInput
  title: StringQueryOperatorInput
}

input SiteSiteMetadataSortInput {
  author: SortOrderEnum
  description: SortOrderEnum
  siteUrl: SortOrderEnum
  title: SortOrderEnum
}

input SiteSortInput {
  buildTime: SortOrderEnum
  children: NodeSortInput
  graphqlTypegen: SortOrderEnum
  host: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  jsxRuntime: SortOrderEnum
  parent: NodeSortInput
  pathPrefix: SortOrderEnum
  polyfill: SortOrderEnum
  port: SortOrderEnum
  siteMetadata: SiteSiteMetadataSortInput
  trailingSlash: SortOrderEnum
}

input StringQueryOperatorInput {
  eq: String
  glob: String
  in: [String]
  ne: String
  nin: [String]
  regex: String
}

input TransformOptions {
  cropFocus: ImageCropFocus = ATTENTION
  duotone: DuotoneGradient
  fit: ImageFit = COVER
  grayscale: Boolean = false
  rotate: Int = 0
  trim: Float = 0.0
}

input WebPOptions {
  quality: Int
}

input contentfulJobsDescriptionTextNodeFieldSelector {
  children: NodeFieldSelector
  description: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  parent: NodeFieldSelector
  sys: contentfulJobsDescriptionTextNodeSysFieldSelector
}

input contentfulJobsDescriptionTextNodeFilterInput {
  children: NodeFilterListInput
  description: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  parent: NodeFilterInput
  sys: contentfulJobsDescriptionTextNodeSysFilterInput
}

input contentfulJobsDescriptionTextNodeFilterListInput {
  elemMatch: contentfulJobsDescriptionTextNodeFilterInput
}

input contentfulJobsDescriptionTextNodeSortInput {
  children: NodeSortInput
  description: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  parent: NodeSortInput
  sys: contentfulJobsDescriptionTextNodeSysSortInput
}

input contentfulJobsDescriptionTextNodeSysFieldSelector {
  type: FieldSelectorEnum
}

input contentfulJobsDescriptionTextNodeSysFilterInput {
  type: StringQueryOperatorInput
}

input contentfulJobsDescriptionTextNodeSysSortInput {
  type: SortOrderEnum
}

input contentfulServicesCpContentJsonNodeFieldSelector {
  children: NodeFieldSelector
  content: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  parent: NodeFieldSelector
  sys: contentfulServicesCpContentJsonNodeSysFieldSelector
  title: FieldSelectorEnum
}

input contentfulServicesCpContentJsonNodeFilterInput {
  children: NodeFilterListInput
  content: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  parent: NodeFilterInput
  sys: contentfulServicesCpContentJsonNodeSysFilterInput
  title: StringQueryOperatorInput
}

input contentfulServicesCpContentJsonNodeFilterListInput {
  elemMatch: contentfulServicesCpContentJsonNodeFilterInput
}

input contentfulServicesCpContentJsonNodeSortInput {
  children: NodeSortInput
  content: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  parent: NodeSortInput
  sys: contentfulServicesCpContentJsonNodeSysSortInput
  title: SortOrderEnum
}

input contentfulServicesCpContentJsonNodeSysFieldSelector {
  type: FieldSelectorEnum
}

input contentfulServicesCpContentJsonNodeSysFilterInput {
  type: StringQueryOperatorInput
}

input contentfulServicesCpContentJsonNodeSysSortInput {
  type: SortOrderEnum
}
